"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.AvailableGlobalVirtualGroupFamiliesResponse = exports.AvailableGlobalVirtualGroupFamiliesRequest = exports.QueryGlobalVirtualGroupFamiliesResponse = exports.QueryGlobalVirtualGroupFamiliesRequest = exports.QueryGlobalVirtualGroupFamilyResponse = exports.QueryGlobalVirtualGroupFamilyRequest = exports.QueryGlobalVirtualGroupByFamilyIDResponse = exports.QueryGlobalVirtualGroupByFamilyIDRequest = exports.QueryGlobalVirtualGroupResponse = exports.QueryGlobalVirtualGroupRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const pagination_1 = require("../../cosmos/base/query/v1beta1/pagination");
const params_1 = require("./params");
const types_1 = require("./types");
const _m0 = __importStar(require("protobufjs/minimal"));
const helpers_1 = require("../../helpers");
exports.protobufPackage = "greenfield.virtualgroup";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: params_1.Params.fromPartial({})
    };
}
exports.QueryParamsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: (0, helpers_1.isSet)(object.params) ? params_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            params: object.params ? params_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toSDK(message.params) : undefined);
        return obj;
    }
};
function createBaseQueryGlobalVirtualGroupRequest() {
    return {
        globalVirtualGroupId: 0
    };
}
exports.QueryGlobalVirtualGroupRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.globalVirtualGroupId !== 0) {
            writer.uint32(8).uint32(message.globalVirtualGroupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGlobalVirtualGroupRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.globalVirtualGroupId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            globalVirtualGroupId: (0, helpers_1.isSet)(object.globalVirtualGroupId) ? Number(object.globalVirtualGroupId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.globalVirtualGroupId !== undefined && (obj.globalVirtualGroupId = Math.round(message.globalVirtualGroupId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGlobalVirtualGroupRequest();
        message.globalVirtualGroupId = object.globalVirtualGroupId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            globalVirtualGroupId: object?.global_virtual_group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.global_virtual_group_id = message.globalVirtualGroupId;
        return obj;
    }
};
function createBaseQueryGlobalVirtualGroupResponse() {
    return {
        globalVirtualGroup: types_1.GlobalVirtualGroup.fromPartial({})
    };
}
exports.QueryGlobalVirtualGroupResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.globalVirtualGroup !== undefined) {
            types_1.GlobalVirtualGroup.encode(message.globalVirtualGroup, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGlobalVirtualGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.globalVirtualGroup = types_1.GlobalVirtualGroup.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            globalVirtualGroup: (0, helpers_1.isSet)(object.globalVirtualGroup) ? types_1.GlobalVirtualGroup.fromJSON(object.globalVirtualGroup) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.globalVirtualGroup !== undefined && (obj.globalVirtualGroup = message.globalVirtualGroup ? types_1.GlobalVirtualGroup.toJSON(message.globalVirtualGroup) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGlobalVirtualGroupResponse();
        message.globalVirtualGroup = object.globalVirtualGroup !== undefined && object.globalVirtualGroup !== null ? types_1.GlobalVirtualGroup.fromPartial(object.globalVirtualGroup) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            globalVirtualGroup: object.global_virtual_group ? types_1.GlobalVirtualGroup.fromSDK(object.global_virtual_group) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.globalVirtualGroup !== undefined && (obj.global_virtual_group = message.globalVirtualGroup ? types_1.GlobalVirtualGroup.toSDK(message.globalVirtualGroup) : undefined);
        return obj;
    }
};
function createBaseQueryGlobalVirtualGroupByFamilyIDRequest() {
    return {
        globalVirtualGroupFamilyId: 0
    };
}
exports.QueryGlobalVirtualGroupByFamilyIDRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.globalVirtualGroupFamilyId !== 0) {
            writer.uint32(8).uint32(message.globalVirtualGroupFamilyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGlobalVirtualGroupByFamilyIDRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.globalVirtualGroupFamilyId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            globalVirtualGroupFamilyId: (0, helpers_1.isSet)(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGlobalVirtualGroupByFamilyIDRequest();
        message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            globalVirtualGroupFamilyId: object?.global_virtual_group_family_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        return obj;
    }
};
function createBaseQueryGlobalVirtualGroupByFamilyIDResponse() {
    return {
        globalVirtualGroups: []
    };
}
exports.QueryGlobalVirtualGroupByFamilyIDResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.globalVirtualGroups) {
            types_1.GlobalVirtualGroup.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGlobalVirtualGroupByFamilyIDResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.globalVirtualGroups.push(types_1.GlobalVirtualGroup.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            globalVirtualGroups: Array.isArray(object?.globalVirtualGroups) ? object.globalVirtualGroups.map((e) => types_1.GlobalVirtualGroup.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.globalVirtualGroups) {
            obj.globalVirtualGroups = message.globalVirtualGroups.map(e => e ? types_1.GlobalVirtualGroup.toJSON(e) : undefined);
        }
        else {
            obj.globalVirtualGroups = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGlobalVirtualGroupByFamilyIDResponse();
        message.globalVirtualGroups = object.globalVirtualGroups?.map(e => types_1.GlobalVirtualGroup.fromPartial(e)) || [];
        return message;
    },
    fromSDK(object) {
        return {
            globalVirtualGroups: Array.isArray(object?.global_virtual_groups) ? object.global_virtual_groups.map((e) => types_1.GlobalVirtualGroup.fromSDK(e)) : []
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.globalVirtualGroups) {
            obj.global_virtual_groups = message.globalVirtualGroups.map(e => e ? types_1.GlobalVirtualGroup.toSDK(e) : undefined);
        }
        else {
            obj.global_virtual_groups = [];
        }
        return obj;
    }
};
function createBaseQueryGlobalVirtualGroupFamilyRequest() {
    return {
        familyId: 0
    };
}
exports.QueryGlobalVirtualGroupFamilyRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.familyId !== 0) {
            writer.uint32(8).uint32(message.familyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGlobalVirtualGroupFamilyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.familyId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            familyId: (0, helpers_1.isSet)(object.familyId) ? Number(object.familyId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.familyId !== undefined && (obj.familyId = Math.round(message.familyId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGlobalVirtualGroupFamilyRequest();
        message.familyId = object.familyId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            familyId: object?.family_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.family_id = message.familyId;
        return obj;
    }
};
function createBaseQueryGlobalVirtualGroupFamilyResponse() {
    return {
        globalVirtualGroupFamily: types_1.GlobalVirtualGroupFamily.fromPartial({})
    };
}
exports.QueryGlobalVirtualGroupFamilyResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.globalVirtualGroupFamily !== undefined) {
            types_1.GlobalVirtualGroupFamily.encode(message.globalVirtualGroupFamily, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGlobalVirtualGroupFamilyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.globalVirtualGroupFamily = types_1.GlobalVirtualGroupFamily.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            globalVirtualGroupFamily: (0, helpers_1.isSet)(object.globalVirtualGroupFamily) ? types_1.GlobalVirtualGroupFamily.fromJSON(object.globalVirtualGroupFamily) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.globalVirtualGroupFamily !== undefined && (obj.globalVirtualGroupFamily = message.globalVirtualGroupFamily ? types_1.GlobalVirtualGroupFamily.toJSON(message.globalVirtualGroupFamily) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGlobalVirtualGroupFamilyResponse();
        message.globalVirtualGroupFamily = object.globalVirtualGroupFamily !== undefined && object.globalVirtualGroupFamily !== null ? types_1.GlobalVirtualGroupFamily.fromPartial(object.globalVirtualGroupFamily) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            globalVirtualGroupFamily: object.global_virtual_group_family ? types_1.GlobalVirtualGroupFamily.fromSDK(object.global_virtual_group_family) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.globalVirtualGroupFamily !== undefined && (obj.global_virtual_group_family = message.globalVirtualGroupFamily ? types_1.GlobalVirtualGroupFamily.toSDK(message.globalVirtualGroupFamily) : undefined);
        return obj;
    }
};
function createBaseQueryGlobalVirtualGroupFamiliesRequest() {
    return {
        pagination: pagination_1.PageRequest.fromPartial({})
    };
}
exports.QueryGlobalVirtualGroupFamiliesRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGlobalVirtualGroupFamiliesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGlobalVirtualGroupFamiliesRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryGlobalVirtualGroupFamiliesResponse() {
    return {
        gvgFamilies: [],
        pagination: pagination_1.PageResponse.fromPartial({})
    };
}
exports.QueryGlobalVirtualGroupFamiliesResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.gvgFamilies) {
            types_1.GlobalVirtualGroupFamily.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGlobalVirtualGroupFamiliesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.gvgFamilies.push(types_1.GlobalVirtualGroupFamily.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            gvgFamilies: Array.isArray(object?.gvgFamilies) ? object.gvgFamilies.map((e) => types_1.GlobalVirtualGroupFamily.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gvgFamilies) {
            obj.gvgFamilies = message.gvgFamilies.map(e => e ? types_1.GlobalVirtualGroupFamily.toJSON(e) : undefined);
        }
        else {
            obj.gvgFamilies = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGlobalVirtualGroupFamiliesResponse();
        message.gvgFamilies = object.gvgFamilies?.map(e => types_1.GlobalVirtualGroupFamily.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            gvgFamilies: Array.isArray(object?.gvg_families) ? object.gvg_families.map((e) => types_1.GlobalVirtualGroupFamily.fromSDK(e)) : [],
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.gvgFamilies) {
            obj.gvg_families = message.gvgFamilies.map(e => e ? types_1.GlobalVirtualGroupFamily.toSDK(e) : undefined);
        }
        else {
            obj.gvg_families = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseAvailableGlobalVirtualGroupFamiliesRequest() {
    return {
        globalVirtualGroupFamilyIds: []
    };
}
exports.AvailableGlobalVirtualGroupFamiliesRequest = {
    encode(message, writer = _m0.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.globalVirtualGroupFamilyIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAvailableGlobalVirtualGroupFamiliesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalVirtualGroupFamilyIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.globalVirtualGroupFamilyIds.push(reader.uint32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            globalVirtualGroupFamilyIds: Array.isArray(object?.globalVirtualGroupFamilyIds) ? object.globalVirtualGroupFamilyIds.map((e) => Number(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.globalVirtualGroupFamilyIds) {
            obj.globalVirtualGroupFamilyIds = message.globalVirtualGroupFamilyIds.map(e => Math.round(e));
        }
        else {
            obj.globalVirtualGroupFamilyIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseAvailableGlobalVirtualGroupFamiliesRequest();
        message.globalVirtualGroupFamilyIds = object.globalVirtualGroupFamilyIds?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            globalVirtualGroupFamilyIds: Array.isArray(object?.global_virtual_group_family_ids) ? object.global_virtual_group_family_ids.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.globalVirtualGroupFamilyIds) {
            obj.global_virtual_group_family_ids = message.globalVirtualGroupFamilyIds.map(e => e);
        }
        else {
            obj.global_virtual_group_family_ids = [];
        }
        return obj;
    }
};
function createBaseAvailableGlobalVirtualGroupFamiliesResponse() {
    return {
        globalVirtualGroupFamilyIds: []
    };
}
exports.AvailableGlobalVirtualGroupFamiliesResponse = {
    encode(message, writer = _m0.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.globalVirtualGroupFamilyIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAvailableGlobalVirtualGroupFamiliesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalVirtualGroupFamilyIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.globalVirtualGroupFamilyIds.push(reader.uint32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            globalVirtualGroupFamilyIds: Array.isArray(object?.globalVirtualGroupFamilyIds) ? object.globalVirtualGroupFamilyIds.map((e) => Number(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.globalVirtualGroupFamilyIds) {
            obj.globalVirtualGroupFamilyIds = message.globalVirtualGroupFamilyIds.map(e => Math.round(e));
        }
        else {
            obj.globalVirtualGroupFamilyIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseAvailableGlobalVirtualGroupFamiliesResponse();
        message.globalVirtualGroupFamilyIds = object.globalVirtualGroupFamilyIds?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            globalVirtualGroupFamilyIds: Array.isArray(object?.global_virtual_group_family_ids) ? object.global_virtual_group_family_ids.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.globalVirtualGroupFamilyIds) {
            obj.global_virtual_group_family_ids = message.globalVirtualGroupFamilyIds.map(e => e);
        }
        else {
            obj.global_virtual_group_family_ids = [];
        }
        return obj;
    }
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.GlobalVirtualGroup = this.GlobalVirtualGroup.bind(this);
        this.GlobalVirtualGroupByFamilyID = this.GlobalVirtualGroupByFamilyID.bind(this);
        this.GlobalVirtualGroupFamily = this.GlobalVirtualGroupFamily.bind(this);
        this.GlobalVirtualGroupFamilies = this.GlobalVirtualGroupFamilies.bind(this);
        this.AvailableGlobalVirtualGroupFamilies = this.AvailableGlobalVirtualGroupFamilies.bind(this);
    }
    Params(request = {}) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Query", "Params", data);
        return promise.then(data => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
    }
    GlobalVirtualGroup(request) {
        const data = exports.QueryGlobalVirtualGroupRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Query", "GlobalVirtualGroup", data);
        return promise.then(data => exports.QueryGlobalVirtualGroupResponse.decode(new _m0.Reader(data)));
    }
    GlobalVirtualGroupByFamilyID(request) {
        const data = exports.QueryGlobalVirtualGroupByFamilyIDRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Query", "GlobalVirtualGroupByFamilyID", data);
        return promise.then(data => exports.QueryGlobalVirtualGroupByFamilyIDResponse.decode(new _m0.Reader(data)));
    }
    GlobalVirtualGroupFamily(request) {
        const data = exports.QueryGlobalVirtualGroupFamilyRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Query", "GlobalVirtualGroupFamily", data);
        return promise.then(data => exports.QueryGlobalVirtualGroupFamilyResponse.decode(new _m0.Reader(data)));
    }
    GlobalVirtualGroupFamilies(request = {
        pagination: undefined
    }) {
        const data = exports.QueryGlobalVirtualGroupFamiliesRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Query", "GlobalVirtualGroupFamilies", data);
        return promise.then(data => exports.QueryGlobalVirtualGroupFamiliesResponse.decode(new _m0.Reader(data)));
    }
    AvailableGlobalVirtualGroupFamilies(request) {
        const data = exports.AvailableGlobalVirtualGroupFamiliesRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Query", "AvailableGlobalVirtualGroupFamilies", data);
        return promise.then(data => exports.AvailableGlobalVirtualGroupFamiliesResponse.decode(new _m0.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
//# sourceMappingURL=query.js.map