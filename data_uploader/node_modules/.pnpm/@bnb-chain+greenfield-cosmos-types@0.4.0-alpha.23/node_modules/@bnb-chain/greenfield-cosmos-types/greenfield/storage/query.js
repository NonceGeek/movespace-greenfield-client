"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryGroupsExistResponse = exports.QueryGroupsExistResponse_ExistsEntry = exports.QueryGroupsExistByIdRequest = exports.QueryGroupsExistRequest = exports.QueryGroupMembersExistResponse = exports.QueryGroupMembersExistResponse_ExistsEntry = exports.QueryGroupMembersExistRequest = exports.QueryQuoteUpdateTimeResponse = exports.QueryQuoteUpdateTimeRequest = exports.QueryIsPriceChangedResponse = exports.QueryIsPriceChangedRequest = exports.QueryHeadBucketExtraResponse = exports.QueryHeadBucketExtraRequest = exports.QueryLockFeeResponse = exports.QueryLockFeeRequest = exports.QueryPolicyByIdResponse = exports.QueryPolicyByIdRequest = exports.QueryPolicyForGroupResponse = exports.QueryPolicyForGroupRequest = exports.QueryHeadGroupMemberResponse = exports.QueryHeadGroupMemberRequest = exports.QueryListGroupsResponse = exports.QueryListGroupsRequest = exports.QueryHeadGroupResponse = exports.QueryHeadGroupRequest = exports.QueryVerifyPermissionResponse = exports.QueryVerifyPermissionRequest = exports.QueryPolicyForAccountResponse = exports.QueryPolicyForAccountRequest = exports.QueryGroupNFTResponse = exports.QueryObjectNFTResponse = exports.QueryBucketNFTResponse = exports.QueryNFTRequest = exports.QueryListObjectsResponse = exports.QueryListObjectsByBucketIdRequest = exports.QueryListObjectsRequest = exports.QueryListBucketsResponse = exports.QueryListBucketsRequest = exports.QueryHeadObjectResponse = exports.QueryHeadObjectByIdRequest = exports.QueryHeadObjectRequest = exports.QueryHeadBucketResponse = exports.QueryHeadBucketByIdRequest = exports.QueryHeadBucketRequest = exports.QueryParamsByTimestampResponse = exports.QueryParamsByTimestampRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const pagination_1 = require("../../cosmos/base/query/v1beta1/pagination");
const common_1 = require("../permission/common");
const params_1 = require("./params");
const types_1 = require("./types");
const types_2 = require("../virtualgroup/types");
const types_3 = require("../permission/types");
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.storage";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: params_1.Params.fromPartial({})
    };
}
exports.QueryParamsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: (0, helpers_1.isSet)(object.params) ? params_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            params: object.params ? params_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toSDK(message.params) : undefined);
        return obj;
    }
};
function createBaseQueryParamsByTimestampRequest() {
    return {
        timestamp: helpers_1.Long.ZERO
    };
}
exports.QueryParamsByTimestampRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.timestamp.isZero()) {
            writer.uint32(8).int64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsByTimestampRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.timestamp = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            timestamp: (0, helpers_1.isSet)(object.timestamp) ? helpers_1.Long.fromValue(object.timestamp) : helpers_1.Long.ZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.timestamp !== undefined && (obj.timestamp = (message.timestamp || helpers_1.Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsByTimestampRequest();
        message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? helpers_1.Long.fromValue(object.timestamp) : helpers_1.Long.ZERO;
        return message;
    },
    fromSDK(object) {
        return {
            timestamp: object?.timestamp
        };
    },
    toSDK(message) {
        const obj = {};
        obj.timestamp = message.timestamp;
        return obj;
    }
};
function createBaseQueryParamsByTimestampResponse() {
    return {
        params: params_1.Params.fromPartial({})
    };
}
exports.QueryParamsByTimestampResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsByTimestampResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: (0, helpers_1.isSet)(object.params) ? params_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsByTimestampResponse();
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            params: object.params ? params_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toSDK(message.params) : undefined);
        return obj;
    }
};
function createBaseQueryHeadBucketRequest() {
    return {
        bucketName: ""
    };
}
exports.QueryHeadBucketRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketName !== "") {
            writer.uint32(10).string(message.bucketName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadBucketRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadBucketRequest();
        message.bucketName = object.bucketName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            bucketName: object?.bucket_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bucket_name = message.bucketName;
        return obj;
    }
};
function createBaseQueryHeadBucketByIdRequest() {
    return {
        bucketId: ""
    };
}
exports.QueryHeadBucketByIdRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketId !== "") {
            writer.uint32(10).string(message.bucketId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadBucketByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadBucketByIdRequest();
        message.bucketId = object.bucketId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            bucketId: object?.bucket_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bucket_id = message.bucketId;
        return obj;
    }
};
function createBaseQueryHeadBucketResponse() {
    return {
        bucketInfo: types_1.BucketInfo.fromPartial({})
    };
}
exports.QueryHeadBucketResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketInfo !== undefined) {
            types_1.BucketInfo.encode(message.bucketInfo, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadBucketResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketInfo = types_1.BucketInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketInfo: (0, helpers_1.isSet)(object.bucketInfo) ? types_1.BucketInfo.fromJSON(object.bucketInfo) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketInfo !== undefined && (obj.bucketInfo = message.bucketInfo ? types_1.BucketInfo.toJSON(message.bucketInfo) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadBucketResponse();
        message.bucketInfo = object.bucketInfo !== undefined && object.bucketInfo !== null ? types_1.BucketInfo.fromPartial(object.bucketInfo) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            bucketInfo: object.bucket_info ? types_1.BucketInfo.fromSDK(object.bucket_info) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.bucketInfo !== undefined && (obj.bucket_info = message.bucketInfo ? types_1.BucketInfo.toSDK(message.bucketInfo) : undefined);
        return obj;
    }
};
function createBaseQueryHeadObjectRequest() {
    return {
        bucketName: "",
        objectName: ""
    };
}
exports.QueryHeadObjectRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketName !== "") {
            writer.uint32(10).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(18).string(message.objectName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadObjectRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketName = reader.string();
                    break;
                case 2:
                    message.objectName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadObjectRequest();
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            bucketName: object?.bucket_name,
            objectName: object?.object_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        return obj;
    }
};
function createBaseQueryHeadObjectByIdRequest() {
    return {
        objectId: ""
    };
}
exports.QueryHeadObjectByIdRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.objectId !== "") {
            writer.uint32(10).string(message.objectId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadObjectByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.objectId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.objectId !== undefined && (obj.objectId = message.objectId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadObjectByIdRequest();
        message.objectId = object.objectId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            objectId: object?.object_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.object_id = message.objectId;
        return obj;
    }
};
function createBaseQueryHeadObjectResponse() {
    return {
        objectInfo: types_1.ObjectInfo.fromPartial({}),
        globalVirtualGroup: types_2.GlobalVirtualGroup.fromPartial({})
    };
}
exports.QueryHeadObjectResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.objectInfo !== undefined) {
            types_1.ObjectInfo.encode(message.objectInfo, writer.uint32(10).fork()).ldelim();
        }
        if (message.globalVirtualGroup !== undefined) {
            types_2.GlobalVirtualGroup.encode(message.globalVirtualGroup, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadObjectResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.objectInfo = types_1.ObjectInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.globalVirtualGroup = types_2.GlobalVirtualGroup.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            objectInfo: (0, helpers_1.isSet)(object.objectInfo) ? types_1.ObjectInfo.fromJSON(object.objectInfo) : undefined,
            globalVirtualGroup: (0, helpers_1.isSet)(object.globalVirtualGroup) ? types_2.GlobalVirtualGroup.fromJSON(object.globalVirtualGroup) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.objectInfo !== undefined && (obj.objectInfo = message.objectInfo ? types_1.ObjectInfo.toJSON(message.objectInfo) : undefined);
        message.globalVirtualGroup !== undefined && (obj.globalVirtualGroup = message.globalVirtualGroup ? types_2.GlobalVirtualGroup.toJSON(message.globalVirtualGroup) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadObjectResponse();
        message.objectInfo = object.objectInfo !== undefined && object.objectInfo !== null ? types_1.ObjectInfo.fromPartial(object.objectInfo) : undefined;
        message.globalVirtualGroup = object.globalVirtualGroup !== undefined && object.globalVirtualGroup !== null ? types_2.GlobalVirtualGroup.fromPartial(object.globalVirtualGroup) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            objectInfo: object.object_info ? types_1.ObjectInfo.fromSDK(object.object_info) : undefined,
            globalVirtualGroup: object.global_virtual_group ? types_2.GlobalVirtualGroup.fromSDK(object.global_virtual_group) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.objectInfo !== undefined && (obj.object_info = message.objectInfo ? types_1.ObjectInfo.toSDK(message.objectInfo) : undefined);
        message.globalVirtualGroup !== undefined && (obj.global_virtual_group = message.globalVirtualGroup ? types_2.GlobalVirtualGroup.toSDK(message.globalVirtualGroup) : undefined);
        return obj;
    }
};
function createBaseQueryListBucketsRequest() {
    return {
        pagination: pagination_1.PageRequest.fromPartial({})
    };
}
exports.QueryListBucketsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListBucketsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryListBucketsRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryListBucketsResponse() {
    return {
        bucketInfos: [],
        pagination: pagination_1.PageResponse.fromPartial({})
    };
}
exports.QueryListBucketsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.bucketInfos) {
            types_1.BucketInfo.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListBucketsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketInfos.push(types_1.BucketInfo.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketInfos: Array.isArray(object?.bucketInfos) ? object.bucketInfos.map((e) => types_1.BucketInfo.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bucketInfos) {
            obj.bucketInfos = message.bucketInfos.map(e => e ? types_1.BucketInfo.toJSON(e) : undefined);
        }
        else {
            obj.bucketInfos = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryListBucketsResponse();
        message.bucketInfos = object.bucketInfos?.map(e => types_1.BucketInfo.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            bucketInfos: Array.isArray(object?.bucket_infos) ? object.bucket_infos.map((e) => types_1.BucketInfo.fromSDK(e)) : [],
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.bucketInfos) {
            obj.bucket_infos = message.bucketInfos.map(e => e ? types_1.BucketInfo.toSDK(e) : undefined);
        }
        else {
            obj.bucket_infos = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryListObjectsRequest() {
    return {
        pagination: pagination_1.PageRequest.fromPartial({}),
        bucketName: ""
    };
}
exports.QueryListObjectsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListObjectsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryListObjectsRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        message.bucketName = object.bucketName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined,
            bucketName: object?.bucket_name
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        obj.bucket_name = message.bucketName;
        return obj;
    }
};
function createBaseQueryListObjectsByBucketIdRequest() {
    return {
        pagination: pagination_1.PageRequest.fromPartial({}),
        bucketId: ""
    };
}
exports.QueryListObjectsByBucketIdRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.bucketId !== "") {
            writer.uint32(18).string(message.bucketId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListObjectsByBucketIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.bucketId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryListObjectsByBucketIdRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        message.bucketId = object.bucketId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined,
            bucketId: object?.bucket_id
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        obj.bucket_id = message.bucketId;
        return obj;
    }
};
function createBaseQueryListObjectsResponse() {
    return {
        objectInfos: [],
        pagination: pagination_1.PageResponse.fromPartial({})
    };
}
exports.QueryListObjectsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.objectInfos) {
            types_1.ObjectInfo.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListObjectsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.objectInfos.push(types_1.ObjectInfo.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            objectInfos: Array.isArray(object?.objectInfos) ? object.objectInfos.map((e) => types_1.ObjectInfo.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.objectInfos) {
            obj.objectInfos = message.objectInfos.map(e => e ? types_1.ObjectInfo.toJSON(e) : undefined);
        }
        else {
            obj.objectInfos = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryListObjectsResponse();
        message.objectInfos = object.objectInfos?.map(e => types_1.ObjectInfo.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            objectInfos: Array.isArray(object?.object_infos) ? object.object_infos.map((e) => types_1.ObjectInfo.fromSDK(e)) : [],
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.objectInfos) {
            obj.object_infos = message.objectInfos.map(e => e ? types_1.ObjectInfo.toSDK(e) : undefined);
        }
        else {
            obj.object_infos = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryNFTRequest() {
    return {
        tokenId: ""
    };
}
exports.QueryNFTRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.tokenId !== "") {
            writer.uint32(10).string(message.tokenId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNFTRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokenId: (0, helpers_1.isSet)(object.tokenId) ? String(object.tokenId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.tokenId !== undefined && (obj.tokenId = message.tokenId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryNFTRequest();
        message.tokenId = object.tokenId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            tokenId: object?.token_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.token_id = message.tokenId;
        return obj;
    }
};
function createBaseQueryBucketNFTResponse() {
    return {
        metaData: types_1.BucketMetaData.fromPartial({})
    };
}
exports.QueryBucketNFTResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.metaData !== undefined) {
            types_1.BucketMetaData.encode(message.metaData, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBucketNFTResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metaData = types_1.BucketMetaData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            metaData: (0, helpers_1.isSet)(object.metaData) ? types_1.BucketMetaData.fromJSON(object.metaData) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.metaData !== undefined && (obj.metaData = message.metaData ? types_1.BucketMetaData.toJSON(message.metaData) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryBucketNFTResponse();
        message.metaData = object.metaData !== undefined && object.metaData !== null ? types_1.BucketMetaData.fromPartial(object.metaData) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            metaData: object.meta_data ? types_1.BucketMetaData.fromSDK(object.meta_data) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.metaData !== undefined && (obj.meta_data = message.metaData ? types_1.BucketMetaData.toSDK(message.metaData) : undefined);
        return obj;
    }
};
function createBaseQueryObjectNFTResponse() {
    return {
        metaData: types_1.ObjectMetaData.fromPartial({})
    };
}
exports.QueryObjectNFTResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.metaData !== undefined) {
            types_1.ObjectMetaData.encode(message.metaData, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryObjectNFTResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metaData = types_1.ObjectMetaData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            metaData: (0, helpers_1.isSet)(object.metaData) ? types_1.ObjectMetaData.fromJSON(object.metaData) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.metaData !== undefined && (obj.metaData = message.metaData ? types_1.ObjectMetaData.toJSON(message.metaData) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryObjectNFTResponse();
        message.metaData = object.metaData !== undefined && object.metaData !== null ? types_1.ObjectMetaData.fromPartial(object.metaData) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            metaData: object.meta_data ? types_1.ObjectMetaData.fromSDK(object.meta_data) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.metaData !== undefined && (obj.meta_data = message.metaData ? types_1.ObjectMetaData.toSDK(message.metaData) : undefined);
        return obj;
    }
};
function createBaseQueryGroupNFTResponse() {
    return {
        metaData: types_1.GroupMetaData.fromPartial({})
    };
}
exports.QueryGroupNFTResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.metaData !== undefined) {
            types_1.GroupMetaData.encode(message.metaData, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGroupNFTResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metaData = types_1.GroupMetaData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            metaData: (0, helpers_1.isSet)(object.metaData) ? types_1.GroupMetaData.fromJSON(object.metaData) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.metaData !== undefined && (obj.metaData = message.metaData ? types_1.GroupMetaData.toJSON(message.metaData) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGroupNFTResponse();
        message.metaData = object.metaData !== undefined && object.metaData !== null ? types_1.GroupMetaData.fromPartial(object.metaData) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            metaData: object.meta_data ? types_1.GroupMetaData.fromSDK(object.meta_data) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.metaData !== undefined && (obj.meta_data = message.metaData ? types_1.GroupMetaData.toSDK(message.metaData) : undefined);
        return obj;
    }
};
function createBaseQueryPolicyForAccountRequest() {
    return {
        resource: "",
        principalAddress: ""
    };
}
exports.QueryPolicyForAccountRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.resource !== "") {
            writer.uint32(10).string(message.resource);
        }
        if (message.principalAddress !== "") {
            writer.uint32(18).string(message.principalAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPolicyForAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.resource = reader.string();
                    break;
                case 2:
                    message.principalAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            resource: (0, helpers_1.isSet)(object.resource) ? String(object.resource) : "",
            principalAddress: (0, helpers_1.isSet)(object.principalAddress) ? String(object.principalAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.resource !== undefined && (obj.resource = message.resource);
        message.principalAddress !== undefined && (obj.principalAddress = message.principalAddress);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPolicyForAccountRequest();
        message.resource = object.resource ?? "";
        message.principalAddress = object.principalAddress ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            resource: object?.resource,
            principalAddress: object?.principal_address
        };
    },
    toSDK(message) {
        const obj = {};
        obj.resource = message.resource;
        obj.principal_address = message.principalAddress;
        return obj;
    }
};
function createBaseQueryPolicyForAccountResponse() {
    return {
        policy: types_3.Policy.fromPartial({})
    };
}
exports.QueryPolicyForAccountResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.policy !== undefined) {
            types_3.Policy.encode(message.policy, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPolicyForAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.policy = types_3.Policy.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            policy: (0, helpers_1.isSet)(object.policy) ? types_3.Policy.fromJSON(object.policy) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.policy !== undefined && (obj.policy = message.policy ? types_3.Policy.toJSON(message.policy) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPolicyForAccountResponse();
        message.policy = object.policy !== undefined && object.policy !== null ? types_3.Policy.fromPartial(object.policy) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            policy: object.policy ? types_3.Policy.fromSDK(object.policy) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.policy !== undefined && (obj.policy = message.policy ? types_3.Policy.toSDK(message.policy) : undefined);
        return obj;
    }
};
function createBaseQueryVerifyPermissionRequest() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        actionType: 0
    };
}
exports.QueryVerifyPermissionRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.actionType !== 0) {
            writer.uint32(32).int32(message.actionType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryVerifyPermissionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.actionType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            actionType: (0, helpers_1.isSet)(object.actionType) ? (0, common_1.actionTypeFromJSON)(object.actionType) : -1
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.actionType !== undefined && (obj.actionType = (0, common_1.actionTypeToJSON)(message.actionType));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryVerifyPermissionRequest();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.actionType = object.actionType ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            actionType: (0, helpers_1.isSet)(object.action_type) ? (0, common_1.actionTypeFromJSON)(object.action_type) : -1
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        message.actionType !== undefined && (obj.action_type = (0, common_1.actionTypeToJSON)(message.actionType));
        return obj;
    }
};
function createBaseQueryVerifyPermissionResponse() {
    return {
        effect: 0
    };
}
exports.QueryVerifyPermissionResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.effect !== 0) {
            writer.uint32(8).int32(message.effect);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryVerifyPermissionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.effect = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            effect: (0, helpers_1.isSet)(object.effect) ? (0, common_1.effectFromJSON)(object.effect) : -1
        };
    },
    toJSON(message) {
        const obj = {};
        message.effect !== undefined && (obj.effect = (0, common_1.effectToJSON)(message.effect));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryVerifyPermissionResponse();
        message.effect = object.effect ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            effect: (0, helpers_1.isSet)(object.effect) ? (0, common_1.effectFromJSON)(object.effect) : -1
        };
    },
    toSDK(message) {
        const obj = {};
        message.effect !== undefined && (obj.effect = (0, common_1.effectToJSON)(message.effect));
        return obj;
    }
};
function createBaseQueryHeadGroupRequest() {
    return {
        groupOwner: "",
        groupName: ""
    };
}
exports.QueryHeadGroupRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.groupOwner !== "") {
            writer.uint32(10).string(message.groupOwner);
        }
        if (message.groupName !== "") {
            writer.uint32(18).string(message.groupName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadGroupRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.groupOwner = reader.string();
                    break;
                case 2:
                    message.groupName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupOwner: (0, helpers_1.isSet)(object.groupOwner) ? String(object.groupOwner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.groupOwner !== undefined && (obj.groupOwner = message.groupOwner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadGroupRequest();
        message.groupOwner = object.groupOwner ?? "";
        message.groupName = object.groupName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            groupOwner: object?.group_owner,
            groupName: object?.group_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.group_owner = message.groupOwner;
        obj.group_name = message.groupName;
        return obj;
    }
};
function createBaseQueryHeadGroupResponse() {
    return {
        groupInfo: types_1.GroupInfo.fromPartial({})
    };
}
exports.QueryHeadGroupResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.groupInfo !== undefined) {
            types_1.GroupInfo.encode(message.groupInfo, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.groupInfo = types_1.GroupInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupInfo: (0, helpers_1.isSet)(object.groupInfo) ? types_1.GroupInfo.fromJSON(object.groupInfo) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.groupInfo !== undefined && (obj.groupInfo = message.groupInfo ? types_1.GroupInfo.toJSON(message.groupInfo) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadGroupResponse();
        message.groupInfo = object.groupInfo !== undefined && object.groupInfo !== null ? types_1.GroupInfo.fromPartial(object.groupInfo) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            groupInfo: object.group_info ? types_1.GroupInfo.fromSDK(object.group_info) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.groupInfo !== undefined && (obj.group_info = message.groupInfo ? types_1.GroupInfo.toSDK(message.groupInfo) : undefined);
        return obj;
    }
};
function createBaseQueryListGroupsRequest() {
    return {
        pagination: pagination_1.PageRequest.fromPartial({}),
        groupOwner: ""
    };
}
exports.QueryListGroupsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.groupOwner !== "") {
            writer.uint32(18).string(message.groupOwner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListGroupsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.groupOwner = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
            groupOwner: (0, helpers_1.isSet)(object.groupOwner) ? String(object.groupOwner) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        message.groupOwner !== undefined && (obj.groupOwner = message.groupOwner);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryListGroupsRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        message.groupOwner = object.groupOwner ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined,
            groupOwner: object?.group_owner
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        obj.group_owner = message.groupOwner;
        return obj;
    }
};
function createBaseQueryListGroupsResponse() {
    return {
        pagination: pagination_1.PageResponse.fromPartial({}),
        groupInfos: []
    };
}
exports.QueryListGroupsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.groupInfos) {
            types_1.GroupInfo.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListGroupsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.groupInfos.push(types_1.GroupInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
            groupInfos: Array.isArray(object?.groupInfos) ? object.groupInfos.map((e) => types_1.GroupInfo.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        if (message.groupInfos) {
            obj.groupInfos = message.groupInfos.map(e => e ? types_1.GroupInfo.toJSON(e) : undefined);
        }
        else {
            obj.groupInfos = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryListGroupsResponse();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        message.groupInfos = object.groupInfos?.map(e => types_1.GroupInfo.fromPartial(e)) || [];
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined,
            groupInfos: Array.isArray(object?.group_infos) ? object.group_infos.map((e) => types_1.GroupInfo.fromSDK(e)) : []
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        if (message.groupInfos) {
            obj.group_infos = message.groupInfos.map(e => e ? types_1.GroupInfo.toSDK(e) : undefined);
        }
        else {
            obj.group_infos = [];
        }
        return obj;
    }
};
function createBaseQueryHeadGroupMemberRequest() {
    return {
        member: "",
        groupOwner: "",
        groupName: ""
    };
}
exports.QueryHeadGroupMemberRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.member !== "") {
            writer.uint32(10).string(message.member);
        }
        if (message.groupOwner !== "") {
            writer.uint32(18).string(message.groupOwner);
        }
        if (message.groupName !== "") {
            writer.uint32(26).string(message.groupName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadGroupMemberRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.member = reader.string();
                    break;
                case 2:
                    message.groupOwner = reader.string();
                    break;
                case 3:
                    message.groupName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            member: (0, helpers_1.isSet)(object.member) ? String(object.member) : "",
            groupOwner: (0, helpers_1.isSet)(object.groupOwner) ? String(object.groupOwner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.member !== undefined && (obj.member = message.member);
        message.groupOwner !== undefined && (obj.groupOwner = message.groupOwner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadGroupMemberRequest();
        message.member = object.member ?? "";
        message.groupOwner = object.groupOwner ?? "";
        message.groupName = object.groupName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            member: object?.member,
            groupOwner: object?.group_owner,
            groupName: object?.group_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.member = message.member;
        obj.group_owner = message.groupOwner;
        obj.group_name = message.groupName;
        return obj;
    }
};
function createBaseQueryHeadGroupMemberResponse() {
    return {
        groupMember: types_3.GroupMember.fromPartial({})
    };
}
exports.QueryHeadGroupMemberResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.groupMember !== undefined) {
            types_3.GroupMember.encode(message.groupMember, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadGroupMemberResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.groupMember = types_3.GroupMember.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupMember: (0, helpers_1.isSet)(object.groupMember) ? types_3.GroupMember.fromJSON(object.groupMember) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.groupMember !== undefined && (obj.groupMember = message.groupMember ? types_3.GroupMember.toJSON(message.groupMember) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadGroupMemberResponse();
        message.groupMember = object.groupMember !== undefined && object.groupMember !== null ? types_3.GroupMember.fromPartial(object.groupMember) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            groupMember: object.group_member ? types_3.GroupMember.fromSDK(object.group_member) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.groupMember !== undefined && (obj.group_member = message.groupMember ? types_3.GroupMember.toSDK(message.groupMember) : undefined);
        return obj;
    }
};
function createBaseQueryPolicyForGroupRequest() {
    return {
        resource: "",
        principalGroupId: ""
    };
}
exports.QueryPolicyForGroupRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.resource !== "") {
            writer.uint32(10).string(message.resource);
        }
        if (message.principalGroupId !== "") {
            writer.uint32(18).string(message.principalGroupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPolicyForGroupRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.resource = reader.string();
                    break;
                case 2:
                    message.principalGroupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            resource: (0, helpers_1.isSet)(object.resource) ? String(object.resource) : "",
            principalGroupId: (0, helpers_1.isSet)(object.principalGroupId) ? String(object.principalGroupId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.resource !== undefined && (obj.resource = message.resource);
        message.principalGroupId !== undefined && (obj.principalGroupId = message.principalGroupId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPolicyForGroupRequest();
        message.resource = object.resource ?? "";
        message.principalGroupId = object.principalGroupId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            resource: object?.resource,
            principalGroupId: object?.principal_group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.resource = message.resource;
        obj.principal_group_id = message.principalGroupId;
        return obj;
    }
};
function createBaseQueryPolicyForGroupResponse() {
    return {
        policy: types_3.Policy.fromPartial({})
    };
}
exports.QueryPolicyForGroupResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.policy !== undefined) {
            types_3.Policy.encode(message.policy, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPolicyForGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.policy = types_3.Policy.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            policy: (0, helpers_1.isSet)(object.policy) ? types_3.Policy.fromJSON(object.policy) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.policy !== undefined && (obj.policy = message.policy ? types_3.Policy.toJSON(message.policy) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPolicyForGroupResponse();
        message.policy = object.policy !== undefined && object.policy !== null ? types_3.Policy.fromPartial(object.policy) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            policy: object.policy ? types_3.Policy.fromSDK(object.policy) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.policy !== undefined && (obj.policy = message.policy ? types_3.Policy.toSDK(message.policy) : undefined);
        return obj;
    }
};
function createBaseQueryPolicyByIdRequest() {
    return {
        policyId: ""
    };
}
exports.QueryPolicyByIdRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.policyId !== "") {
            writer.uint32(10).string(message.policyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPolicyByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.policyId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            policyId: (0, helpers_1.isSet)(object.policyId) ? String(object.policyId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.policyId !== undefined && (obj.policyId = message.policyId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPolicyByIdRequest();
        message.policyId = object.policyId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            policyId: object?.policy_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.policy_id = message.policyId;
        return obj;
    }
};
function createBaseQueryPolicyByIdResponse() {
    return {
        policy: types_3.Policy.fromPartial({})
    };
}
exports.QueryPolicyByIdResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.policy !== undefined) {
            types_3.Policy.encode(message.policy, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPolicyByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.policy = types_3.Policy.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            policy: (0, helpers_1.isSet)(object.policy) ? types_3.Policy.fromJSON(object.policy) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.policy !== undefined && (obj.policy = message.policy ? types_3.Policy.toJSON(message.policy) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPolicyByIdResponse();
        message.policy = object.policy !== undefined && object.policy !== null ? types_3.Policy.fromPartial(object.policy) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            policy: object.policy ? types_3.Policy.fromSDK(object.policy) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.policy !== undefined && (obj.policy = message.policy ? types_3.Policy.toSDK(message.policy) : undefined);
        return obj;
    }
};
function createBaseQueryLockFeeRequest() {
    return {
        primarySpAddress: "",
        createAt: helpers_1.Long.ZERO,
        payloadSize: helpers_1.Long.UZERO
    };
}
exports.QueryLockFeeRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.primarySpAddress !== "") {
            writer.uint32(10).string(message.primarySpAddress);
        }
        if (!message.createAt.isZero()) {
            writer.uint32(16).int64(message.createAt);
        }
        if (!message.payloadSize.isZero()) {
            writer.uint32(24).uint64(message.payloadSize);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLockFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.primarySpAddress = reader.string();
                    break;
                case 2:
                    message.createAt = reader.int64();
                    break;
                case 3:
                    message.payloadSize = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            primarySpAddress: (0, helpers_1.isSet)(object.primarySpAddress) ? String(object.primarySpAddress) : "",
            createAt: (0, helpers_1.isSet)(object.createAt) ? helpers_1.Long.fromValue(object.createAt) : helpers_1.Long.ZERO,
            payloadSize: (0, helpers_1.isSet)(object.payloadSize) ? helpers_1.Long.fromValue(object.payloadSize) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.primarySpAddress !== undefined && (obj.primarySpAddress = message.primarySpAddress);
        message.createAt !== undefined && (obj.createAt = (message.createAt || helpers_1.Long.ZERO).toString());
        message.payloadSize !== undefined && (obj.payloadSize = (message.payloadSize || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryLockFeeRequest();
        message.primarySpAddress = object.primarySpAddress ?? "";
        message.createAt = object.createAt !== undefined && object.createAt !== null ? helpers_1.Long.fromValue(object.createAt) : helpers_1.Long.ZERO;
        message.payloadSize = object.payloadSize !== undefined && object.payloadSize !== null ? helpers_1.Long.fromValue(object.payloadSize) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            primarySpAddress: object?.primary_sp_address,
            createAt: object?.create_at,
            payloadSize: object?.payload_size
        };
    },
    toSDK(message) {
        const obj = {};
        obj.primary_sp_address = message.primarySpAddress;
        obj.create_at = message.createAt;
        obj.payload_size = message.payloadSize;
        return obj;
    }
};
function createBaseQueryLockFeeResponse() {
    return {
        amount: ""
    };
}
exports.QueryLockFeeResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLockFeeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.amount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            amount: (0, helpers_1.isSet)(object.amount) ? String(object.amount) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.amount !== undefined && (obj.amount = message.amount);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryLockFeeResponse();
        message.amount = object.amount ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            amount: object?.amount
        };
    },
    toSDK(message) {
        const obj = {};
        obj.amount = message.amount;
        return obj;
    }
};
function createBaseQueryHeadBucketExtraRequest() {
    return {
        bucketName: ""
    };
}
exports.QueryHeadBucketExtraRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketName !== "") {
            writer.uint32(10).string(message.bucketName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadBucketExtraRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadBucketExtraRequest();
        message.bucketName = object.bucketName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            bucketName: object?.bucket_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bucket_name = message.bucketName;
        return obj;
    }
};
function createBaseQueryHeadBucketExtraResponse() {
    return {
        extraInfo: types_1.InternalBucketInfo.fromPartial({})
    };
}
exports.QueryHeadBucketExtraResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.extraInfo !== undefined) {
            types_1.InternalBucketInfo.encode(message.extraInfo, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadBucketExtraResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.extraInfo = types_1.InternalBucketInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            extraInfo: (0, helpers_1.isSet)(object.extraInfo) ? types_1.InternalBucketInfo.fromJSON(object.extraInfo) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.extraInfo !== undefined && (obj.extraInfo = message.extraInfo ? types_1.InternalBucketInfo.toJSON(message.extraInfo) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadBucketExtraResponse();
        message.extraInfo = object.extraInfo !== undefined && object.extraInfo !== null ? types_1.InternalBucketInfo.fromPartial(object.extraInfo) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            extraInfo: object.extra_info ? types_1.InternalBucketInfo.fromSDK(object.extra_info) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.extraInfo !== undefined && (obj.extra_info = message.extraInfo ? types_1.InternalBucketInfo.toSDK(message.extraInfo) : undefined);
        return obj;
    }
};
function createBaseQueryIsPriceChangedRequest() {
    return {
        bucketName: ""
    };
}
exports.QueryIsPriceChangedRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketName !== "") {
            writer.uint32(10).string(message.bucketName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryIsPriceChangedRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryIsPriceChangedRequest();
        message.bucketName = object.bucketName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            bucketName: object?.bucket_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bucket_name = message.bucketName;
        return obj;
    }
};
function createBaseQueryIsPriceChangedResponse() {
    return {
        changed: false,
        currentReadPrice: "",
        currentPrimaryStorePrice: "",
        currentSecondaryStorePrice: "",
        currentValidatorTaxRate: "",
        newReadPrice: "",
        newPrimaryStorePrice: "",
        newSecondaryStorePrice: "",
        newValidatorTaxRate: ""
    };
}
exports.QueryIsPriceChangedResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.changed === true) {
            writer.uint32(8).bool(message.changed);
        }
        if (message.currentReadPrice !== "") {
            writer.uint32(18).string(message.currentReadPrice);
        }
        if (message.currentPrimaryStorePrice !== "") {
            writer.uint32(26).string(message.currentPrimaryStorePrice);
        }
        if (message.currentSecondaryStorePrice !== "") {
            writer.uint32(34).string(message.currentSecondaryStorePrice);
        }
        if (message.currentValidatorTaxRate !== "") {
            writer.uint32(42).string(message.currentValidatorTaxRate);
        }
        if (message.newReadPrice !== "") {
            writer.uint32(50).string(message.newReadPrice);
        }
        if (message.newPrimaryStorePrice !== "") {
            writer.uint32(58).string(message.newPrimaryStorePrice);
        }
        if (message.newSecondaryStorePrice !== "") {
            writer.uint32(66).string(message.newSecondaryStorePrice);
        }
        if (message.newValidatorTaxRate !== "") {
            writer.uint32(74).string(message.newValidatorTaxRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryIsPriceChangedResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.changed = reader.bool();
                    break;
                case 2:
                    message.currentReadPrice = reader.string();
                    break;
                case 3:
                    message.currentPrimaryStorePrice = reader.string();
                    break;
                case 4:
                    message.currentSecondaryStorePrice = reader.string();
                    break;
                case 5:
                    message.currentValidatorTaxRate = reader.string();
                    break;
                case 6:
                    message.newReadPrice = reader.string();
                    break;
                case 7:
                    message.newPrimaryStorePrice = reader.string();
                    break;
                case 8:
                    message.newSecondaryStorePrice = reader.string();
                    break;
                case 9:
                    message.newValidatorTaxRate = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            changed: (0, helpers_1.isSet)(object.changed) ? Boolean(object.changed) : false,
            currentReadPrice: (0, helpers_1.isSet)(object.currentReadPrice) ? String(object.currentReadPrice) : "",
            currentPrimaryStorePrice: (0, helpers_1.isSet)(object.currentPrimaryStorePrice) ? String(object.currentPrimaryStorePrice) : "",
            currentSecondaryStorePrice: (0, helpers_1.isSet)(object.currentSecondaryStorePrice) ? String(object.currentSecondaryStorePrice) : "",
            currentValidatorTaxRate: (0, helpers_1.isSet)(object.currentValidatorTaxRate) ? String(object.currentValidatorTaxRate) : "",
            newReadPrice: (0, helpers_1.isSet)(object.newReadPrice) ? String(object.newReadPrice) : "",
            newPrimaryStorePrice: (0, helpers_1.isSet)(object.newPrimaryStorePrice) ? String(object.newPrimaryStorePrice) : "",
            newSecondaryStorePrice: (0, helpers_1.isSet)(object.newSecondaryStorePrice) ? String(object.newSecondaryStorePrice) : "",
            newValidatorTaxRate: (0, helpers_1.isSet)(object.newValidatorTaxRate) ? String(object.newValidatorTaxRate) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.changed !== undefined && (obj.changed = message.changed);
        message.currentReadPrice !== undefined && (obj.currentReadPrice = message.currentReadPrice);
        message.currentPrimaryStorePrice !== undefined && (obj.currentPrimaryStorePrice = message.currentPrimaryStorePrice);
        message.currentSecondaryStorePrice !== undefined && (obj.currentSecondaryStorePrice = message.currentSecondaryStorePrice);
        message.currentValidatorTaxRate !== undefined && (obj.currentValidatorTaxRate = message.currentValidatorTaxRate);
        message.newReadPrice !== undefined && (obj.newReadPrice = message.newReadPrice);
        message.newPrimaryStorePrice !== undefined && (obj.newPrimaryStorePrice = message.newPrimaryStorePrice);
        message.newSecondaryStorePrice !== undefined && (obj.newSecondaryStorePrice = message.newSecondaryStorePrice);
        message.newValidatorTaxRate !== undefined && (obj.newValidatorTaxRate = message.newValidatorTaxRate);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryIsPriceChangedResponse();
        message.changed = object.changed ?? false;
        message.currentReadPrice = object.currentReadPrice ?? "";
        message.currentPrimaryStorePrice = object.currentPrimaryStorePrice ?? "";
        message.currentSecondaryStorePrice = object.currentSecondaryStorePrice ?? "";
        message.currentValidatorTaxRate = object.currentValidatorTaxRate ?? "";
        message.newReadPrice = object.newReadPrice ?? "";
        message.newPrimaryStorePrice = object.newPrimaryStorePrice ?? "";
        message.newSecondaryStorePrice = object.newSecondaryStorePrice ?? "";
        message.newValidatorTaxRate = object.newValidatorTaxRate ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            changed: object?.changed,
            currentReadPrice: object?.current_read_price,
            currentPrimaryStorePrice: object?.current_primary_store_price,
            currentSecondaryStorePrice: object?.current_secondary_store_price,
            currentValidatorTaxRate: object?.current_validator_tax_rate,
            newReadPrice: object?.new_read_price,
            newPrimaryStorePrice: object?.new_primary_store_price,
            newSecondaryStorePrice: object?.new_secondary_store_price,
            newValidatorTaxRate: object?.new_validator_tax_rate
        };
    },
    toSDK(message) {
        const obj = {};
        obj.changed = message.changed;
        obj.current_read_price = message.currentReadPrice;
        obj.current_primary_store_price = message.currentPrimaryStorePrice;
        obj.current_secondary_store_price = message.currentSecondaryStorePrice;
        obj.current_validator_tax_rate = message.currentValidatorTaxRate;
        obj.new_read_price = message.newReadPrice;
        obj.new_primary_store_price = message.newPrimaryStorePrice;
        obj.new_secondary_store_price = message.newSecondaryStorePrice;
        obj.new_validator_tax_rate = message.newValidatorTaxRate;
        return obj;
    }
};
function createBaseQueryQuoteUpdateTimeRequest() {
    return {
        bucketName: ""
    };
}
exports.QueryQuoteUpdateTimeRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketName !== "") {
            writer.uint32(10).string(message.bucketName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryQuoteUpdateTimeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryQuoteUpdateTimeRequest();
        message.bucketName = object.bucketName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            bucketName: object?.bucket_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bucket_name = message.bucketName;
        return obj;
    }
};
function createBaseQueryQuoteUpdateTimeResponse() {
    return {
        updateAt: helpers_1.Long.ZERO
    };
}
exports.QueryQuoteUpdateTimeResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.updateAt.isZero()) {
            writer.uint32(48).int64(message.updateAt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryQuoteUpdateTimeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 6:
                    message.updateAt = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            updateAt: (0, helpers_1.isSet)(object.updateAt) ? helpers_1.Long.fromValue(object.updateAt) : helpers_1.Long.ZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.updateAt !== undefined && (obj.updateAt = (message.updateAt || helpers_1.Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryQuoteUpdateTimeResponse();
        message.updateAt = object.updateAt !== undefined && object.updateAt !== null ? helpers_1.Long.fromValue(object.updateAt) : helpers_1.Long.ZERO;
        return message;
    },
    fromSDK(object) {
        return {
            updateAt: object?.update_at
        };
    },
    toSDK(message) {
        const obj = {};
        obj.update_at = message.updateAt;
        return obj;
    }
};
function createBaseQueryGroupMembersExistRequest() {
    return {
        groupId: "",
        members: []
    };
}
exports.QueryGroupMembersExistRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.groupId !== "") {
            writer.uint32(10).string(message.groupId);
        }
        for (const v of message.members) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGroupMembersExistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.string();
                    break;
                case 2:
                    message.members.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : "",
            members: Array.isArray(object?.members) ? object.members.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.groupId !== undefined && (obj.groupId = message.groupId);
        if (message.members) {
            obj.members = message.members.map(e => e);
        }
        else {
            obj.members = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGroupMembersExistRequest();
        message.groupId = object.groupId ?? "";
        message.members = object.members?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            groupId: object?.group_id,
            members: Array.isArray(object?.members) ? object.members.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.group_id = message.groupId;
        if (message.members) {
            obj.members = message.members.map(e => e);
        }
        else {
            obj.members = [];
        }
        return obj;
    }
};
function createBaseQueryGroupMembersExistResponse_ExistsEntry() {
    return {
        key: "",
        value: false
    };
}
exports.QueryGroupMembersExistResponse_ExistsEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value === true) {
            writer.uint32(16).bool(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGroupMembersExistResponse_ExistsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: (0, helpers_1.isSet)(object.key) ? String(object.key) : "",
            value: (0, helpers_1.isSet)(object.value) ? Boolean(object.value) : false
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGroupMembersExistResponse_ExistsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? false;
        return message;
    },
    fromSDK(object) {
        return {
            key: object?.key,
            value: object?.value
        };
    },
    toSDK(message) {
        const obj = {};
        obj.key = message.key;
        obj.value = message.value;
        return obj;
    }
};
function createBaseQueryGroupMembersExistResponse() {
    return {
        exists: {}
    };
}
exports.QueryGroupMembersExistResponse = {
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.exists).forEach(([key, value]) => {
            exports.QueryGroupMembersExistResponse_ExistsEntry.encode({
                key: key,
                value
            }, writer.uint32(8).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGroupMembersExistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = exports.QueryGroupMembersExistResponse_ExistsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.exists[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            exists: (0, helpers_1.isObject)(object.exists) ? Object.entries(object.exists).reduce((acc, [key, value]) => {
                acc[key] = bool.fromJSON(value);
                return acc;
            }, {}) : {}
        };
    },
    toJSON(message) {
        const obj = {};
        obj.exists = {};
        if (message.exists) {
            Object.entries(message.exists).forEach(([k, v]) => {
                obj.exists[k] = bool.toJSON(v);
            });
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGroupMembersExistResponse();
        message.exists = Object.entries(object.exists ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = bool.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
    fromSDK(object) {
        return {
            exists: (0, helpers_1.isObject)(object.exists) ? Object.entries(object.exists).reduce((acc, [key, value]) => {
                acc[key] = bool.fromSDK(value);
                return acc;
            }, {}) : {}
        };
    },
    toSDK(message) {
        const obj = {};
        obj.exists = {};
        if (message.exists) {
            Object.entries(message.exists).forEach(([k, v]) => {
                obj.exists[k] = bool.toSDK(v);
            });
        }
        return obj;
    }
};
function createBaseQueryGroupsExistRequest() {
    return {
        groupOwner: "",
        groupNames: []
    };
}
exports.QueryGroupsExistRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.groupOwner !== "") {
            writer.uint32(10).string(message.groupOwner);
        }
        for (const v of message.groupNames) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGroupsExistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.groupOwner = reader.string();
                    break;
                case 2:
                    message.groupNames.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupOwner: (0, helpers_1.isSet)(object.groupOwner) ? String(object.groupOwner) : "",
            groupNames: Array.isArray(object?.groupNames) ? object.groupNames.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.groupOwner !== undefined && (obj.groupOwner = message.groupOwner);
        if (message.groupNames) {
            obj.groupNames = message.groupNames.map(e => e);
        }
        else {
            obj.groupNames = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGroupsExistRequest();
        message.groupOwner = object.groupOwner ?? "";
        message.groupNames = object.groupNames?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            groupOwner: object?.group_owner,
            groupNames: Array.isArray(object?.group_names) ? object.group_names.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.group_owner = message.groupOwner;
        if (message.groupNames) {
            obj.group_names = message.groupNames.map(e => e);
        }
        else {
            obj.group_names = [];
        }
        return obj;
    }
};
function createBaseQueryGroupsExistByIdRequest() {
    return {
        groupIds: []
    };
}
exports.QueryGroupsExistByIdRequest = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.groupIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGroupsExistByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.groupIds.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupIds: Array.isArray(object?.groupIds) ? object.groupIds.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.groupIds) {
            obj.groupIds = message.groupIds.map(e => e);
        }
        else {
            obj.groupIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGroupsExistByIdRequest();
        message.groupIds = object.groupIds?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            groupIds: Array.isArray(object?.group_ids) ? object.group_ids.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.groupIds) {
            obj.group_ids = message.groupIds.map(e => e);
        }
        else {
            obj.group_ids = [];
        }
        return obj;
    }
};
function createBaseQueryGroupsExistResponse_ExistsEntry() {
    return {
        key: "",
        value: false
    };
}
exports.QueryGroupsExistResponse_ExistsEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value === true) {
            writer.uint32(16).bool(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGroupsExistResponse_ExistsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: (0, helpers_1.isSet)(object.key) ? String(object.key) : "",
            value: (0, helpers_1.isSet)(object.value) ? Boolean(object.value) : false
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGroupsExistResponse_ExistsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? false;
        return message;
    },
    fromSDK(object) {
        return {
            key: object?.key,
            value: object?.value
        };
    },
    toSDK(message) {
        const obj = {};
        obj.key = message.key;
        obj.value = message.value;
        return obj;
    }
};
function createBaseQueryGroupsExistResponse() {
    return {
        exists: {}
    };
}
exports.QueryGroupsExistResponse = {
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.exists).forEach(([key, value]) => {
            exports.QueryGroupsExistResponse_ExistsEntry.encode({
                key: key,
                value
            }, writer.uint32(8).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGroupsExistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = exports.QueryGroupsExistResponse_ExistsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.exists[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            exists: (0, helpers_1.isObject)(object.exists) ? Object.entries(object.exists).reduce((acc, [key, value]) => {
                acc[key] = bool.fromJSON(value);
                return acc;
            }, {}) : {}
        };
    },
    toJSON(message) {
        const obj = {};
        obj.exists = {};
        if (message.exists) {
            Object.entries(message.exists).forEach(([k, v]) => {
                obj.exists[k] = bool.toJSON(v);
            });
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGroupsExistResponse();
        message.exists = Object.entries(object.exists ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = bool.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
    fromSDK(object) {
        return {
            exists: (0, helpers_1.isObject)(object.exists) ? Object.entries(object.exists).reduce((acc, [key, value]) => {
                acc[key] = bool.fromSDK(value);
                return acc;
            }, {}) : {}
        };
    },
    toSDK(message) {
        const obj = {};
        obj.exists = {};
        if (message.exists) {
            Object.entries(message.exists).forEach(([k, v]) => {
                obj.exists[k] = bool.toSDK(v);
            });
        }
        return obj;
    }
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.QueryParamsByTimestamp = this.QueryParamsByTimestamp.bind(this);
        this.HeadBucket = this.HeadBucket.bind(this);
        this.HeadBucketById = this.HeadBucketById.bind(this);
        this.HeadBucketNFT = this.HeadBucketNFT.bind(this);
        this.HeadObject = this.HeadObject.bind(this);
        this.HeadObjectById = this.HeadObjectById.bind(this);
        this.HeadObjectNFT = this.HeadObjectNFT.bind(this);
        this.ListBuckets = this.ListBuckets.bind(this);
        this.ListObjects = this.ListObjects.bind(this);
        this.ListObjectsByBucketId = this.ListObjectsByBucketId.bind(this);
        this.HeadGroupNFT = this.HeadGroupNFT.bind(this);
        this.QueryPolicyForAccount = this.QueryPolicyForAccount.bind(this);
        this.VerifyPermission = this.VerifyPermission.bind(this);
        this.HeadGroup = this.HeadGroup.bind(this);
        this.ListGroups = this.ListGroups.bind(this);
        this.HeadGroupMember = this.HeadGroupMember.bind(this);
        this.QueryPolicyForGroup = this.QueryPolicyForGroup.bind(this);
        this.QueryPolicyById = this.QueryPolicyById.bind(this);
        this.QueryLockFee = this.QueryLockFee.bind(this);
        this.HeadBucketExtra = this.HeadBucketExtra.bind(this);
        this.QueryIsPriceChanged = this.QueryIsPriceChanged.bind(this);
        this.QueryQuotaUpdateTime = this.QueryQuotaUpdateTime.bind(this);
        this.QueryGroupMembersExist = this.QueryGroupMembersExist.bind(this);
        this.QueryGroupsExist = this.QueryGroupsExist.bind(this);
        this.QueryGroupsExistById = this.QueryGroupsExistById.bind(this);
    }
    Params(request = {}) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "Params", data);
        return promise.then(data => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
    }
    QueryParamsByTimestamp(request) {
        const data = exports.QueryParamsByTimestampRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "QueryParamsByTimestamp", data);
        return promise.then(data => exports.QueryParamsByTimestampResponse.decode(new _m0.Reader(data)));
    }
    HeadBucket(request) {
        const data = exports.QueryHeadBucketRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadBucket", data);
        return promise.then(data => exports.QueryHeadBucketResponse.decode(new _m0.Reader(data)));
    }
    HeadBucketById(request) {
        const data = exports.QueryHeadBucketByIdRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadBucketById", data);
        return promise.then(data => exports.QueryHeadBucketResponse.decode(new _m0.Reader(data)));
    }
    HeadBucketNFT(request) {
        const data = exports.QueryNFTRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadBucketNFT", data);
        return promise.then(data => exports.QueryBucketNFTResponse.decode(new _m0.Reader(data)));
    }
    HeadObject(request) {
        const data = exports.QueryHeadObjectRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadObject", data);
        return promise.then(data => exports.QueryHeadObjectResponse.decode(new _m0.Reader(data)));
    }
    HeadObjectById(request) {
        const data = exports.QueryHeadObjectByIdRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadObjectById", data);
        return promise.then(data => exports.QueryHeadObjectResponse.decode(new _m0.Reader(data)));
    }
    HeadObjectNFT(request) {
        const data = exports.QueryNFTRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadObjectNFT", data);
        return promise.then(data => exports.QueryObjectNFTResponse.decode(new _m0.Reader(data)));
    }
    ListBuckets(request = {
        pagination: undefined
    }) {
        const data = exports.QueryListBucketsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "ListBuckets", data);
        return promise.then(data => exports.QueryListBucketsResponse.decode(new _m0.Reader(data)));
    }
    ListObjects(request) {
        const data = exports.QueryListObjectsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "ListObjects", data);
        return promise.then(data => exports.QueryListObjectsResponse.decode(new _m0.Reader(data)));
    }
    ListObjectsByBucketId(request) {
        const data = exports.QueryListObjectsByBucketIdRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "ListObjectsByBucketId", data);
        return promise.then(data => exports.QueryListObjectsResponse.decode(new _m0.Reader(data)));
    }
    HeadGroupNFT(request) {
        const data = exports.QueryNFTRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadGroupNFT", data);
        return promise.then(data => exports.QueryGroupNFTResponse.decode(new _m0.Reader(data)));
    }
    QueryPolicyForAccount(request) {
        const data = exports.QueryPolicyForAccountRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "QueryPolicyForAccount", data);
        return promise.then(data => exports.QueryPolicyForAccountResponse.decode(new _m0.Reader(data)));
    }
    VerifyPermission(request) {
        const data = exports.QueryVerifyPermissionRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "VerifyPermission", data);
        return promise.then(data => exports.QueryVerifyPermissionResponse.decode(new _m0.Reader(data)));
    }
    HeadGroup(request) {
        const data = exports.QueryHeadGroupRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadGroup", data);
        return promise.then(data => exports.QueryHeadGroupResponse.decode(new _m0.Reader(data)));
    }
    ListGroups(request) {
        const data = exports.QueryListGroupsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "ListGroups", data);
        return promise.then(data => exports.QueryListGroupsResponse.decode(new _m0.Reader(data)));
    }
    HeadGroupMember(request) {
        const data = exports.QueryHeadGroupMemberRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadGroupMember", data);
        return promise.then(data => exports.QueryHeadGroupMemberResponse.decode(new _m0.Reader(data)));
    }
    QueryPolicyForGroup(request) {
        const data = exports.QueryPolicyForGroupRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "QueryPolicyForGroup", data);
        return promise.then(data => exports.QueryPolicyForGroupResponse.decode(new _m0.Reader(data)));
    }
    QueryPolicyById(request) {
        const data = exports.QueryPolicyByIdRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "QueryPolicyById", data);
        return promise.then(data => exports.QueryPolicyByIdResponse.decode(new _m0.Reader(data)));
    }
    QueryLockFee(request) {
        const data = exports.QueryLockFeeRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "QueryLockFee", data);
        return promise.then(data => exports.QueryLockFeeResponse.decode(new _m0.Reader(data)));
    }
    HeadBucketExtra(request) {
        const data = exports.QueryHeadBucketExtraRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadBucketExtra", data);
        return promise.then(data => exports.QueryHeadBucketExtraResponse.decode(new _m0.Reader(data)));
    }
    QueryIsPriceChanged(request) {
        const data = exports.QueryIsPriceChangedRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "QueryIsPriceChanged", data);
        return promise.then(data => exports.QueryIsPriceChangedResponse.decode(new _m0.Reader(data)));
    }
    QueryQuotaUpdateTime(request) {
        const data = exports.QueryQuoteUpdateTimeRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "QueryQuotaUpdateTime", data);
        return promise.then(data => exports.QueryQuoteUpdateTimeResponse.decode(new _m0.Reader(data)));
    }
    QueryGroupMembersExist(request) {
        const data = exports.QueryGroupMembersExistRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "QueryGroupMembersExist", data);
        return promise.then(data => exports.QueryGroupMembersExistResponse.decode(new _m0.Reader(data)));
    }
    QueryGroupsExist(request) {
        const data = exports.QueryGroupsExistRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "QueryGroupsExist", data);
        return promise.then(data => exports.QueryGroupsExistResponse.decode(new _m0.Reader(data)));
    }
    QueryGroupsExistById(request) {
        const data = exports.QueryGroupsExistByIdRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "QueryGroupsExistById", data);
        return promise.then(data => exports.QueryGroupsExistResponse.decode(new _m0.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
//# sourceMappingURL=query.js.map