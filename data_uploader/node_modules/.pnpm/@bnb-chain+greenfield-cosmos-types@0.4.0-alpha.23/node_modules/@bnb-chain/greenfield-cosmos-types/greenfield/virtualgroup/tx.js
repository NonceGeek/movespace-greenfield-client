"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgCompleteStorageProviderExitResponse = exports.MsgCompleteStorageProviderExit = exports.MsgStorageProviderExitResponse = exports.MsgStorageProviderExit = exports.MsgSettleResponse = exports.MsgSettle = exports.MsgCancelSwapOutResponse = exports.MsgCancelSwapOut = exports.MsgCompleteSwapOutResponse = exports.MsgCompleteSwapOut = exports.MsgSwapOutResponse = exports.MsgSwapOut = exports.MsgWithdrawResponse = exports.MsgWithdraw = exports.MsgDepositResponse = exports.MsgDeposit = exports.MsgDeleteGlobalVirtualGroupResponse = exports.MsgDeleteGlobalVirtualGroup = exports.MsgCreateGlobalVirtualGroupResponse = exports.MsgCreateGlobalVirtualGroup = exports.MsgUpdateParamsResponse = exports.MsgUpdateParams = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const coin_1 = require("../../cosmos/base/v1beta1/coin");
const approval_1 = require("../common/approval");
const params_1 = require("./params");
const _m0 = __importStar(require("protobufjs/minimal"));
const helpers_1 = require("../../helpers");
exports.protobufPackage = "greenfield.virtualgroup";
function createBaseMsgUpdateParams() {
    return {
        authority: "",
        params: params_1.Params.fromPartial({})
    };
}
exports.MsgUpdateParams = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authority = reader.string();
                    break;
                case 2:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: (0, helpers_1.isSet)(object.authority) ? String(object.authority) : "",
            params: (0, helpers_1.isSet)(object.params) ? params_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.authority !== undefined && (obj.authority = message.authority);
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateParams();
        message.authority = object.authority ?? "";
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            authority: object?.authority,
            params: object.params ? params_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.authority = message.authority;
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toSDK(message.params) : undefined);
        return obj;
    }
};
function createBaseMsgUpdateParamsResponse() {
    return {};
}
exports.MsgUpdateParamsResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgCreateGlobalVirtualGroup() {
    return {
        storageProvider: "",
        familyId: 0,
        secondarySpIds: [],
        deposit: coin_1.Coin.fromPartial({})
    };
}
exports.MsgCreateGlobalVirtualGroup = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProvider !== "") {
            writer.uint32(10).string(message.storageProvider);
        }
        if (message.familyId !== 0) {
            writer.uint32(16).uint32(message.familyId);
        }
        writer.uint32(26).fork();
        for (const v of message.secondarySpIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        if (message.deposit !== undefined) {
            coin_1.Coin.encode(message.deposit, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateGlobalVirtualGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProvider = reader.string();
                    break;
                case 2:
                    message.familyId = reader.uint32();
                    break;
                case 3:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.secondarySpIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.secondarySpIds.push(reader.uint32());
                    }
                    break;
                case 4:
                    message.deposit = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProvider: (0, helpers_1.isSet)(object.storageProvider) ? String(object.storageProvider) : "",
            familyId: (0, helpers_1.isSet)(object.familyId) ? Number(object.familyId) : 0,
            secondarySpIds: Array.isArray(object?.secondarySpIds) ? object.secondarySpIds.map((e) => Number(e)) : [],
            deposit: (0, helpers_1.isSet)(object.deposit) ? coin_1.Coin.fromJSON(object.deposit) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider);
        message.familyId !== undefined && (obj.familyId = Math.round(message.familyId));
        if (message.secondarySpIds) {
            obj.secondarySpIds = message.secondarySpIds.map(e => Math.round(e));
        }
        else {
            obj.secondarySpIds = [];
        }
        message.deposit !== undefined && (obj.deposit = message.deposit ? coin_1.Coin.toJSON(message.deposit) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgCreateGlobalVirtualGroup();
        message.storageProvider = object.storageProvider ?? "";
        message.familyId = object.familyId ?? 0;
        message.secondarySpIds = object.secondarySpIds?.map(e => e) || [];
        message.deposit = object.deposit !== undefined && object.deposit !== null ? coin_1.Coin.fromPartial(object.deposit) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            storageProvider: object?.storage_provider,
            familyId: object?.family_id,
            secondarySpIds: Array.isArray(object?.secondary_sp_ids) ? object.secondary_sp_ids.map((e) => e) : [],
            deposit: object.deposit ? coin_1.Coin.fromSDK(object.deposit) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider = message.storageProvider;
        obj.family_id = message.familyId;
        if (message.secondarySpIds) {
            obj.secondary_sp_ids = message.secondarySpIds.map(e => e);
        }
        else {
            obj.secondary_sp_ids = [];
        }
        message.deposit !== undefined && (obj.deposit = message.deposit ? coin_1.Coin.toSDK(message.deposit) : undefined);
        return obj;
    }
};
function createBaseMsgCreateGlobalVirtualGroupResponse() {
    return {};
}
exports.MsgCreateGlobalVirtualGroupResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateGlobalVirtualGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgCreateGlobalVirtualGroupResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgDeleteGlobalVirtualGroup() {
    return {
        storageProvider: "",
        globalVirtualGroupId: 0
    };
}
exports.MsgDeleteGlobalVirtualGroup = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProvider !== "") {
            writer.uint32(10).string(message.storageProvider);
        }
        if (message.globalVirtualGroupId !== 0) {
            writer.uint32(16).uint32(message.globalVirtualGroupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteGlobalVirtualGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProvider = reader.string();
                    break;
                case 2:
                    message.globalVirtualGroupId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProvider: (0, helpers_1.isSet)(object.storageProvider) ? String(object.storageProvider) : "",
            globalVirtualGroupId: (0, helpers_1.isSet)(object.globalVirtualGroupId) ? Number(object.globalVirtualGroupId) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider);
        message.globalVirtualGroupId !== undefined && (obj.globalVirtualGroupId = Math.round(message.globalVirtualGroupId));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgDeleteGlobalVirtualGroup();
        message.storageProvider = object.storageProvider ?? "";
        message.globalVirtualGroupId = object.globalVirtualGroupId ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            storageProvider: object?.storage_provider,
            globalVirtualGroupId: object?.global_virtual_group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider = message.storageProvider;
        obj.global_virtual_group_id = message.globalVirtualGroupId;
        return obj;
    }
};
function createBaseMsgDeleteGlobalVirtualGroupResponse() {
    return {};
}
exports.MsgDeleteGlobalVirtualGroupResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteGlobalVirtualGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgDeleteGlobalVirtualGroupResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgDeposit() {
    return {
        storageProvider: "",
        globalVirtualGroupId: 0,
        deposit: coin_1.Coin.fromPartial({})
    };
}
exports.MsgDeposit = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProvider !== "") {
            writer.uint32(10).string(message.storageProvider);
        }
        if (message.globalVirtualGroupId !== 0) {
            writer.uint32(16).uint32(message.globalVirtualGroupId);
        }
        if (message.deposit !== undefined) {
            coin_1.Coin.encode(message.deposit, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeposit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProvider = reader.string();
                    break;
                case 2:
                    message.globalVirtualGroupId = reader.uint32();
                    break;
                case 3:
                    message.deposit = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProvider: (0, helpers_1.isSet)(object.storageProvider) ? String(object.storageProvider) : "",
            globalVirtualGroupId: (0, helpers_1.isSet)(object.globalVirtualGroupId) ? Number(object.globalVirtualGroupId) : 0,
            deposit: (0, helpers_1.isSet)(object.deposit) ? coin_1.Coin.fromJSON(object.deposit) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider);
        message.globalVirtualGroupId !== undefined && (obj.globalVirtualGroupId = Math.round(message.globalVirtualGroupId));
        message.deposit !== undefined && (obj.deposit = message.deposit ? coin_1.Coin.toJSON(message.deposit) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgDeposit();
        message.storageProvider = object.storageProvider ?? "";
        message.globalVirtualGroupId = object.globalVirtualGroupId ?? 0;
        message.deposit = object.deposit !== undefined && object.deposit !== null ? coin_1.Coin.fromPartial(object.deposit) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            storageProvider: object?.storage_provider,
            globalVirtualGroupId: object?.global_virtual_group_id,
            deposit: object.deposit ? coin_1.Coin.fromSDK(object.deposit) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider = message.storageProvider;
        obj.global_virtual_group_id = message.globalVirtualGroupId;
        message.deposit !== undefined && (obj.deposit = message.deposit ? coin_1.Coin.toSDK(message.deposit) : undefined);
        return obj;
    }
};
function createBaseMsgDepositResponse() {
    return {};
}
exports.MsgDepositResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDepositResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgDepositResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgWithdraw() {
    return {
        storageProvider: "",
        globalVirtualGroupId: 0,
        withdraw: coin_1.Coin.fromPartial({})
    };
}
exports.MsgWithdraw = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProvider !== "") {
            writer.uint32(10).string(message.storageProvider);
        }
        if (message.globalVirtualGroupId !== 0) {
            writer.uint32(16).uint32(message.globalVirtualGroupId);
        }
        if (message.withdraw !== undefined) {
            coin_1.Coin.encode(message.withdraw, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWithdraw();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProvider = reader.string();
                    break;
                case 2:
                    message.globalVirtualGroupId = reader.uint32();
                    break;
                case 3:
                    message.withdraw = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProvider: (0, helpers_1.isSet)(object.storageProvider) ? String(object.storageProvider) : "",
            globalVirtualGroupId: (0, helpers_1.isSet)(object.globalVirtualGroupId) ? Number(object.globalVirtualGroupId) : 0,
            withdraw: (0, helpers_1.isSet)(object.withdraw) ? coin_1.Coin.fromJSON(object.withdraw) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider);
        message.globalVirtualGroupId !== undefined && (obj.globalVirtualGroupId = Math.round(message.globalVirtualGroupId));
        message.withdraw !== undefined && (obj.withdraw = message.withdraw ? coin_1.Coin.toJSON(message.withdraw) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgWithdraw();
        message.storageProvider = object.storageProvider ?? "";
        message.globalVirtualGroupId = object.globalVirtualGroupId ?? 0;
        message.withdraw = object.withdraw !== undefined && object.withdraw !== null ? coin_1.Coin.fromPartial(object.withdraw) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            storageProvider: object?.storage_provider,
            globalVirtualGroupId: object?.global_virtual_group_id,
            withdraw: object.withdraw ? coin_1.Coin.fromSDK(object.withdraw) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider = message.storageProvider;
        obj.global_virtual_group_id = message.globalVirtualGroupId;
        message.withdraw !== undefined && (obj.withdraw = message.withdraw ? coin_1.Coin.toSDK(message.withdraw) : undefined);
        return obj;
    }
};
function createBaseMsgWithdrawResponse() {
    return {};
}
exports.MsgWithdrawResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWithdrawResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgWithdrawResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgSwapOut() {
    return {
        storageProvider: "",
        globalVirtualGroupFamilyId: 0,
        globalVirtualGroupIds: [],
        successorSpId: 0,
        successorSpApproval: approval_1.Approval.fromPartial({})
    };
}
exports.MsgSwapOut = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProvider !== "") {
            writer.uint32(10).string(message.storageProvider);
        }
        if (message.globalVirtualGroupFamilyId !== 0) {
            writer.uint32(16).uint32(message.globalVirtualGroupFamilyId);
        }
        writer.uint32(26).fork();
        for (const v of message.globalVirtualGroupIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        if (message.successorSpId !== 0) {
            writer.uint32(32).uint32(message.successorSpId);
        }
        if (message.successorSpApproval !== undefined) {
            approval_1.Approval.encode(message.successorSpApproval, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSwapOut();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProvider = reader.string();
                    break;
                case 2:
                    message.globalVirtualGroupFamilyId = reader.uint32();
                    break;
                case 3:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalVirtualGroupIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.globalVirtualGroupIds.push(reader.uint32());
                    }
                    break;
                case 4:
                    message.successorSpId = reader.uint32();
                    break;
                case 5:
                    message.successorSpApproval = approval_1.Approval.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProvider: (0, helpers_1.isSet)(object.storageProvider) ? String(object.storageProvider) : "",
            globalVirtualGroupFamilyId: (0, helpers_1.isSet)(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0,
            globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e) => Number(e)) : [],
            successorSpId: (0, helpers_1.isSet)(object.successorSpId) ? Number(object.successorSpId) : 0,
            successorSpApproval: (0, helpers_1.isSet)(object.successorSpApproval) ? approval_1.Approval.fromJSON(object.successorSpApproval) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider);
        message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
        if (message.globalVirtualGroupIds) {
            obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
        }
        else {
            obj.globalVirtualGroupIds = [];
        }
        message.successorSpId !== undefined && (obj.successorSpId = Math.round(message.successorSpId));
        message.successorSpApproval !== undefined && (obj.successorSpApproval = message.successorSpApproval ? approval_1.Approval.toJSON(message.successorSpApproval) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgSwapOut();
        message.storageProvider = object.storageProvider ?? "";
        message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
        message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
        message.successorSpId = object.successorSpId ?? 0;
        message.successorSpApproval = object.successorSpApproval !== undefined && object.successorSpApproval !== null ? approval_1.Approval.fromPartial(object.successorSpApproval) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            storageProvider: object?.storage_provider,
            globalVirtualGroupFamilyId: object?.global_virtual_group_family_id,
            globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e) => e) : [],
            successorSpId: object?.successor_sp_id,
            successorSpApproval: object.successor_sp_approval ? approval_1.Approval.fromSDK(object.successor_sp_approval) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider = message.storageProvider;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        obj.successor_sp_id = message.successorSpId;
        message.successorSpApproval !== undefined && (obj.successor_sp_approval = message.successorSpApproval ? approval_1.Approval.toSDK(message.successorSpApproval) : undefined);
        return obj;
    }
};
function createBaseMsgSwapOutResponse() {
    return {};
}
exports.MsgSwapOutResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSwapOutResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgSwapOutResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgCompleteSwapOut() {
    return {
        storageProvider: "",
        globalVirtualGroupFamilyId: 0,
        globalVirtualGroupIds: []
    };
}
exports.MsgCompleteSwapOut = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProvider !== "") {
            writer.uint32(10).string(message.storageProvider);
        }
        if (message.globalVirtualGroupFamilyId !== 0) {
            writer.uint32(16).uint32(message.globalVirtualGroupFamilyId);
        }
        writer.uint32(26).fork();
        for (const v of message.globalVirtualGroupIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCompleteSwapOut();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProvider = reader.string();
                    break;
                case 2:
                    message.globalVirtualGroupFamilyId = reader.uint32();
                    break;
                case 3:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalVirtualGroupIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.globalVirtualGroupIds.push(reader.uint32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProvider: (0, helpers_1.isSet)(object.storageProvider) ? String(object.storageProvider) : "",
            globalVirtualGroupFamilyId: (0, helpers_1.isSet)(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0,
            globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e) => Number(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider);
        message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
        if (message.globalVirtualGroupIds) {
            obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
        }
        else {
            obj.globalVirtualGroupIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgCompleteSwapOut();
        message.storageProvider = object.storageProvider ?? "";
        message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
        message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            storageProvider: object?.storage_provider,
            globalVirtualGroupFamilyId: object?.global_virtual_group_family_id,
            globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider = message.storageProvider;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        return obj;
    }
};
function createBaseMsgCompleteSwapOutResponse() {
    return {};
}
exports.MsgCompleteSwapOutResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCompleteSwapOutResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgCompleteSwapOutResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgCancelSwapOut() {
    return {
        storageProvider: "",
        globalVirtualGroupFamilyId: 0,
        globalVirtualGroupIds: []
    };
}
exports.MsgCancelSwapOut = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProvider !== "") {
            writer.uint32(10).string(message.storageProvider);
        }
        if (message.globalVirtualGroupFamilyId !== 0) {
            writer.uint32(16).uint32(message.globalVirtualGroupFamilyId);
        }
        writer.uint32(26).fork();
        for (const v of message.globalVirtualGroupIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCancelSwapOut();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProvider = reader.string();
                    break;
                case 2:
                    message.globalVirtualGroupFamilyId = reader.uint32();
                    break;
                case 3:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalVirtualGroupIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.globalVirtualGroupIds.push(reader.uint32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProvider: (0, helpers_1.isSet)(object.storageProvider) ? String(object.storageProvider) : "",
            globalVirtualGroupFamilyId: (0, helpers_1.isSet)(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0,
            globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e) => Number(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider);
        message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
        if (message.globalVirtualGroupIds) {
            obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
        }
        else {
            obj.globalVirtualGroupIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgCancelSwapOut();
        message.storageProvider = object.storageProvider ?? "";
        message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
        message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            storageProvider: object?.storage_provider,
            globalVirtualGroupFamilyId: object?.global_virtual_group_family_id,
            globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider = message.storageProvider;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        return obj;
    }
};
function createBaseMsgCancelSwapOutResponse() {
    return {};
}
exports.MsgCancelSwapOutResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCancelSwapOutResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgCancelSwapOutResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgSettle() {
    return {
        storageProvider: "",
        globalVirtualGroupFamilyId: 0,
        globalVirtualGroupIds: []
    };
}
exports.MsgSettle = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProvider !== "") {
            writer.uint32(10).string(message.storageProvider);
        }
        if (message.globalVirtualGroupFamilyId !== 0) {
            writer.uint32(16).uint32(message.globalVirtualGroupFamilyId);
        }
        writer.uint32(26).fork();
        for (const v of message.globalVirtualGroupIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSettle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProvider = reader.string();
                    break;
                case 2:
                    message.globalVirtualGroupFamilyId = reader.uint32();
                    break;
                case 3:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.globalVirtualGroupIds.push(reader.uint32());
                        }
                    }
                    else {
                        message.globalVirtualGroupIds.push(reader.uint32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProvider: (0, helpers_1.isSet)(object.storageProvider) ? String(object.storageProvider) : "",
            globalVirtualGroupFamilyId: (0, helpers_1.isSet)(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0,
            globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e) => Number(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider);
        message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
        if (message.globalVirtualGroupIds) {
            obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
        }
        else {
            obj.globalVirtualGroupIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgSettle();
        message.storageProvider = object.storageProvider ?? "";
        message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
        message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            storageProvider: object?.storage_provider,
            globalVirtualGroupFamilyId: object?.global_virtual_group_family_id,
            globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider = message.storageProvider;
        obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
        if (message.globalVirtualGroupIds) {
            obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
        }
        else {
            obj.global_virtual_group_ids = [];
        }
        return obj;
    }
};
function createBaseMsgSettleResponse() {
    return {};
}
exports.MsgSettleResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSettleResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgSettleResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgStorageProviderExit() {
    return {
        storageProvider: ""
    };
}
exports.MsgStorageProviderExit = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProvider !== "") {
            writer.uint32(10).string(message.storageProvider);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgStorageProviderExit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProvider = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProvider: (0, helpers_1.isSet)(object.storageProvider) ? String(object.storageProvider) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgStorageProviderExit();
        message.storageProvider = object.storageProvider ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            storageProvider: object?.storage_provider
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider = message.storageProvider;
        return obj;
    }
};
function createBaseMsgStorageProviderExitResponse() {
    return {};
}
exports.MsgStorageProviderExitResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgStorageProviderExitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgStorageProviderExitResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgCompleteStorageProviderExit() {
    return {
        storageProvider: ""
    };
}
exports.MsgCompleteStorageProviderExit = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProvider !== "") {
            writer.uint32(10).string(message.storageProvider);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCompleteStorageProviderExit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProvider = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProvider: (0, helpers_1.isSet)(object.storageProvider) ? String(object.storageProvider) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgCompleteStorageProviderExit();
        message.storageProvider = object.storageProvider ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            storageProvider: object?.storage_provider
        };
    },
    toSDK(message) {
        const obj = {};
        obj.storage_provider = message.storageProvider;
        return obj;
    }
};
function createBaseMsgCompleteStorageProviderExitResponse() {
    return {};
}
exports.MsgCompleteStorageProviderExitResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCompleteStorageProviderExitResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgCompleteStorageProviderExitResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
class MsgClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.CreateGlobalVirtualGroup = this.CreateGlobalVirtualGroup.bind(this);
        this.DeleteGlobalVirtualGroup = this.DeleteGlobalVirtualGroup.bind(this);
        this.Deposit = this.Deposit.bind(this);
        this.Withdraw = this.Withdraw.bind(this);
        this.SwapOut = this.SwapOut.bind(this);
        this.Settle = this.Settle.bind(this);
        this.UpdateParams = this.UpdateParams.bind(this);
        this.StorageProviderExit = this.StorageProviderExit.bind(this);
        this.CompleteStorageProviderExit = this.CompleteStorageProviderExit.bind(this);
        this.CompleteSwapOut = this.CompleteSwapOut.bind(this);
        this.CancelSwapOut = this.CancelSwapOut.bind(this);
    }
    CreateGlobalVirtualGroup(request) {
        const data = exports.MsgCreateGlobalVirtualGroup.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Msg", "CreateGlobalVirtualGroup", data);
        return promise.then(data => exports.MsgCreateGlobalVirtualGroupResponse.decode(new _m0.Reader(data)));
    }
    DeleteGlobalVirtualGroup(request) {
        const data = exports.MsgDeleteGlobalVirtualGroup.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Msg", "DeleteGlobalVirtualGroup", data);
        return promise.then(data => exports.MsgDeleteGlobalVirtualGroupResponse.decode(new _m0.Reader(data)));
    }
    Deposit(request) {
        const data = exports.MsgDeposit.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Msg", "Deposit", data);
        return promise.then(data => exports.MsgDepositResponse.decode(new _m0.Reader(data)));
    }
    Withdraw(request) {
        const data = exports.MsgWithdraw.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Msg", "Withdraw", data);
        return promise.then(data => exports.MsgWithdrawResponse.decode(new _m0.Reader(data)));
    }
    SwapOut(request) {
        const data = exports.MsgSwapOut.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Msg", "SwapOut", data);
        return promise.then(data => exports.MsgSwapOutResponse.decode(new _m0.Reader(data)));
    }
    Settle(request) {
        const data = exports.MsgSettle.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Msg", "Settle", data);
        return promise.then(data => exports.MsgSettleResponse.decode(new _m0.Reader(data)));
    }
    UpdateParams(request) {
        const data = exports.MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Msg", "UpdateParams", data);
        return promise.then(data => exports.MsgUpdateParamsResponse.decode(new _m0.Reader(data)));
    }
    StorageProviderExit(request) {
        const data = exports.MsgStorageProviderExit.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Msg", "StorageProviderExit", data);
        return promise.then(data => exports.MsgStorageProviderExitResponse.decode(new _m0.Reader(data)));
    }
    CompleteStorageProviderExit(request) {
        const data = exports.MsgCompleteStorageProviderExit.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Msg", "CompleteStorageProviderExit", data);
        return promise.then(data => exports.MsgCompleteStorageProviderExitResponse.decode(new _m0.Reader(data)));
    }
    CompleteSwapOut(request) {
        const data = exports.MsgCompleteSwapOut.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Msg", "CompleteSwapOut", data);
        return promise.then(data => exports.MsgCompleteSwapOutResponse.decode(new _m0.Reader(data)));
    }
    CancelSwapOut(request) {
        const data = exports.MsgCancelSwapOut.encode(request).finish();
        const promise = this.rpc.request("greenfield.virtualgroup.Msg", "CancelSwapOut", data);
        return promise.then(data => exports.MsgCancelSwapOutResponse.decode(new _m0.Reader(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
//# sourceMappingURL=tx.js.map