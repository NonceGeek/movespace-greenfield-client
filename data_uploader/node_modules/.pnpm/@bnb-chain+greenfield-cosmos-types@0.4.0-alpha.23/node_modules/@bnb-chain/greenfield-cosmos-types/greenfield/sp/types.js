"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaintenanceRecord = exports.SpMaintenanceStats = exports.GlobalSpStorePrice = exports.SpStoragePrice = exports.RewardInfo = exports.StorageProvider = exports.Description = exports.statusToJSON = exports.statusFromJSON = exports.StatusSDKType = exports.Status = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const coin_1 = require("../../cosmos/base/v1beta1/coin");
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.sp";
/** Status is the status of a storage provider. */
var Status;
(function (Status) {
    Status[Status["STATUS_IN_SERVICE"] = 0] = "STATUS_IN_SERVICE";
    Status[Status["STATUS_IN_JAILED"] = 1] = "STATUS_IN_JAILED";
    Status[Status["STATUS_GRACEFUL_EXITING"] = 2] = "STATUS_GRACEFUL_EXITING";
    Status[Status["STATUS_IN_MAINTENANCE"] = 3] = "STATUS_IN_MAINTENANCE";
    Status[Status["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Status = exports.Status || (exports.Status = {}));
exports.StatusSDKType = Status;
function statusFromJSON(object) {
    switch (object) {
        case 0:
        case "STATUS_IN_SERVICE":
            return Status.STATUS_IN_SERVICE;
        case 1:
        case "STATUS_IN_JAILED":
            return Status.STATUS_IN_JAILED;
        case 2:
        case "STATUS_GRACEFUL_EXITING":
            return Status.STATUS_GRACEFUL_EXITING;
        case 3:
        case "STATUS_IN_MAINTENANCE":
            return Status.STATUS_IN_MAINTENANCE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Status.UNRECOGNIZED;
    }
}
exports.statusFromJSON = statusFromJSON;
function statusToJSON(object) {
    switch (object) {
        case Status.STATUS_IN_SERVICE:
            return "STATUS_IN_SERVICE";
        case Status.STATUS_IN_JAILED:
            return "STATUS_IN_JAILED";
        case Status.STATUS_GRACEFUL_EXITING:
            return "STATUS_GRACEFUL_EXITING";
        case Status.STATUS_IN_MAINTENANCE:
            return "STATUS_IN_MAINTENANCE";
        case Status.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.statusToJSON = statusToJSON;
function createBaseDescription() {
    return {
        moniker: "",
        identity: "",
        website: "",
        securityContact: "",
        details: ""
    };
}
exports.Description = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.moniker !== "") {
            writer.uint32(10).string(message.moniker);
        }
        if (message.identity !== "") {
            writer.uint32(18).string(message.identity);
        }
        if (message.website !== "") {
            writer.uint32(26).string(message.website);
        }
        if (message.securityContact !== "") {
            writer.uint32(34).string(message.securityContact);
        }
        if (message.details !== "") {
            writer.uint32(42).string(message.details);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDescription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.moniker = reader.string();
                    break;
                case 2:
                    message.identity = reader.string();
                    break;
                case 3:
                    message.website = reader.string();
                    break;
                case 4:
                    message.securityContact = reader.string();
                    break;
                case 5:
                    message.details = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            moniker: (0, helpers_1.isSet)(object.moniker) ? String(object.moniker) : "",
            identity: (0, helpers_1.isSet)(object.identity) ? String(object.identity) : "",
            website: (0, helpers_1.isSet)(object.website) ? String(object.website) : "",
            securityContact: (0, helpers_1.isSet)(object.securityContact) ? String(object.securityContact) : "",
            details: (0, helpers_1.isSet)(object.details) ? String(object.details) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.moniker !== undefined && (obj.moniker = message.moniker);
        message.identity !== undefined && (obj.identity = message.identity);
        message.website !== undefined && (obj.website = message.website);
        message.securityContact !== undefined && (obj.securityContact = message.securityContact);
        message.details !== undefined && (obj.details = message.details);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseDescription();
        message.moniker = object.moniker ?? "";
        message.identity = object.identity ?? "";
        message.website = object.website ?? "";
        message.securityContact = object.securityContact ?? "";
        message.details = object.details ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            moniker: object?.moniker,
            identity: object?.identity,
            website: object?.website,
            securityContact: object?.security_contact,
            details: object?.details
        };
    },
    toSDK(message) {
        const obj = {};
        obj.moniker = message.moniker;
        obj.identity = message.identity;
        obj.website = message.website;
        obj.security_contact = message.securityContact;
        obj.details = message.details;
        return obj;
    }
};
function createBaseStorageProvider() {
    return {
        id: 0,
        operatorAddress: "",
        fundingAddress: "",
        sealAddress: "",
        approvalAddress: "",
        gcAddress: "",
        maintenanceAddress: "",
        totalDeposit: "",
        status: 0,
        endpoint: "",
        description: exports.Description.fromPartial({}),
        blsKey: new Uint8Array()
    };
}
exports.StorageProvider = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.operatorAddress !== "") {
            writer.uint32(18).string(message.operatorAddress);
        }
        if (message.fundingAddress !== "") {
            writer.uint32(26).string(message.fundingAddress);
        }
        if (message.sealAddress !== "") {
            writer.uint32(34).string(message.sealAddress);
        }
        if (message.approvalAddress !== "") {
            writer.uint32(42).string(message.approvalAddress);
        }
        if (message.gcAddress !== "") {
            writer.uint32(50).string(message.gcAddress);
        }
        if (message.maintenanceAddress !== "") {
            writer.uint32(58).string(message.maintenanceAddress);
        }
        if (message.totalDeposit !== "") {
            writer.uint32(66).string(message.totalDeposit);
        }
        if (message.status !== 0) {
            writer.uint32(72).int32(message.status);
        }
        if (message.endpoint !== "") {
            writer.uint32(82).string(message.endpoint);
        }
        if (message.description !== undefined) {
            exports.Description.encode(message.description, writer.uint32(90).fork()).ldelim();
        }
        if (message.blsKey.length !== 0) {
            writer.uint32(98).bytes(message.blsKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStorageProvider();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.operatorAddress = reader.string();
                    break;
                case 3:
                    message.fundingAddress = reader.string();
                    break;
                case 4:
                    message.sealAddress = reader.string();
                    break;
                case 5:
                    message.approvalAddress = reader.string();
                    break;
                case 6:
                    message.gcAddress = reader.string();
                    break;
                case 7:
                    message.maintenanceAddress = reader.string();
                    break;
                case 8:
                    message.totalDeposit = reader.string();
                    break;
                case 9:
                    message.status = reader.int32();
                    break;
                case 10:
                    message.endpoint = reader.string();
                    break;
                case 11:
                    message.description = exports.Description.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.blsKey = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? Number(object.id) : 0,
            operatorAddress: (0, helpers_1.isSet)(object.operatorAddress) ? String(object.operatorAddress) : "",
            fundingAddress: (0, helpers_1.isSet)(object.fundingAddress) ? String(object.fundingAddress) : "",
            sealAddress: (0, helpers_1.isSet)(object.sealAddress) ? String(object.sealAddress) : "",
            approvalAddress: (0, helpers_1.isSet)(object.approvalAddress) ? String(object.approvalAddress) : "",
            gcAddress: (0, helpers_1.isSet)(object.gcAddress) ? String(object.gcAddress) : "",
            maintenanceAddress: (0, helpers_1.isSet)(object.maintenanceAddress) ? String(object.maintenanceAddress) : "",
            totalDeposit: (0, helpers_1.isSet)(object.totalDeposit) ? String(object.totalDeposit) : "",
            status: (0, helpers_1.isSet)(object.status) ? statusFromJSON(object.status) : -1,
            endpoint: (0, helpers_1.isSet)(object.endpoint) ? String(object.endpoint) : "",
            description: (0, helpers_1.isSet)(object.description) ? exports.Description.fromJSON(object.description) : undefined,
            blsKey: (0, helpers_1.isSet)(object.blsKey) ? (0, helpers_1.bytesFromBase64)(object.blsKey) : new Uint8Array()
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        message.operatorAddress !== undefined && (obj.operatorAddress = message.operatorAddress);
        message.fundingAddress !== undefined && (obj.fundingAddress = message.fundingAddress);
        message.sealAddress !== undefined && (obj.sealAddress = message.sealAddress);
        message.approvalAddress !== undefined && (obj.approvalAddress = message.approvalAddress);
        message.gcAddress !== undefined && (obj.gcAddress = message.gcAddress);
        message.maintenanceAddress !== undefined && (obj.maintenanceAddress = message.maintenanceAddress);
        message.totalDeposit !== undefined && (obj.totalDeposit = message.totalDeposit);
        message.status !== undefined && (obj.status = statusToJSON(message.status));
        message.endpoint !== undefined && (obj.endpoint = message.endpoint);
        message.description !== undefined && (obj.description = message.description ? exports.Description.toJSON(message.description) : undefined);
        message.blsKey !== undefined && (obj.blsKey = (0, helpers_1.base64FromBytes)(message.blsKey !== undefined ? message.blsKey : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseStorageProvider();
        message.id = object.id ?? 0;
        message.operatorAddress = object.operatorAddress ?? "";
        message.fundingAddress = object.fundingAddress ?? "";
        message.sealAddress = object.sealAddress ?? "";
        message.approvalAddress = object.approvalAddress ?? "";
        message.gcAddress = object.gcAddress ?? "";
        message.maintenanceAddress = object.maintenanceAddress ?? "";
        message.totalDeposit = object.totalDeposit ?? "";
        message.status = object.status ?? 0;
        message.endpoint = object.endpoint ?? "";
        message.description = object.description !== undefined && object.description !== null ? exports.Description.fromPartial(object.description) : undefined;
        message.blsKey = object.blsKey ?? new Uint8Array();
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            operatorAddress: object?.operator_address,
            fundingAddress: object?.funding_address,
            sealAddress: object?.seal_address,
            approvalAddress: object?.approval_address,
            gcAddress: object?.gc_address,
            maintenanceAddress: object?.maintenance_address,
            totalDeposit: object?.total_deposit,
            status: (0, helpers_1.isSet)(object.status) ? statusFromJSON(object.status) : -1,
            endpoint: object?.endpoint,
            description: object.description ? exports.Description.fromSDK(object.description) : undefined,
            blsKey: object?.bls_key
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        obj.operator_address = message.operatorAddress;
        obj.funding_address = message.fundingAddress;
        obj.seal_address = message.sealAddress;
        obj.approval_address = message.approvalAddress;
        obj.gc_address = message.gcAddress;
        obj.maintenance_address = message.maintenanceAddress;
        obj.total_deposit = message.totalDeposit;
        message.status !== undefined && (obj.status = statusToJSON(message.status));
        obj.endpoint = message.endpoint;
        message.description !== undefined && (obj.description = message.description ? exports.Description.toSDK(message.description) : undefined);
        obj.bls_key = message.blsKey;
        return obj;
    }
};
function createBaseRewardInfo() {
    return {
        address: "",
        amount: coin_1.Coin.fromPartial({})
    };
}
exports.RewardInfo = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRewardInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: (0, helpers_1.isSet)(object.address) ? String(object.address) : "",
            amount: (0, helpers_1.isSet)(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseRewardInfo();
        message.address = object.address ?? "";
        message.amount = object.amount !== undefined && object.amount !== null ? coin_1.Coin.fromPartial(object.amount) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            address: object?.address,
            amount: object.amount ? coin_1.Coin.fromSDK(object.amount) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.address = message.address;
        message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toSDK(message.amount) : undefined);
        return obj;
    }
};
function createBaseSpStoragePrice() {
    return {
        spId: 0,
        updateTimeSec: helpers_1.Long.ZERO,
        readPrice: "",
        freeReadQuota: helpers_1.Long.UZERO,
        storePrice: ""
    };
}
exports.SpStoragePrice = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.spId !== 0) {
            writer.uint32(8).uint32(message.spId);
        }
        if (!message.updateTimeSec.isZero()) {
            writer.uint32(16).int64(message.updateTimeSec);
        }
        if (message.readPrice !== "") {
            writer.uint32(26).string(message.readPrice);
        }
        if (!message.freeReadQuota.isZero()) {
            writer.uint32(32).uint64(message.freeReadQuota);
        }
        if (message.storePrice !== "") {
            writer.uint32(42).string(message.storePrice);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSpStoragePrice();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spId = reader.uint32();
                    break;
                case 2:
                    message.updateTimeSec = reader.int64();
                    break;
                case 3:
                    message.readPrice = reader.string();
                    break;
                case 4:
                    message.freeReadQuota = reader.uint64();
                    break;
                case 5:
                    message.storePrice = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            spId: (0, helpers_1.isSet)(object.spId) ? Number(object.spId) : 0,
            updateTimeSec: (0, helpers_1.isSet)(object.updateTimeSec) ? helpers_1.Long.fromValue(object.updateTimeSec) : helpers_1.Long.ZERO,
            readPrice: (0, helpers_1.isSet)(object.readPrice) ? String(object.readPrice) : "",
            freeReadQuota: (0, helpers_1.isSet)(object.freeReadQuota) ? helpers_1.Long.fromValue(object.freeReadQuota) : helpers_1.Long.UZERO,
            storePrice: (0, helpers_1.isSet)(object.storePrice) ? String(object.storePrice) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.spId !== undefined && (obj.spId = Math.round(message.spId));
        message.updateTimeSec !== undefined && (obj.updateTimeSec = (message.updateTimeSec || helpers_1.Long.ZERO).toString());
        message.readPrice !== undefined && (obj.readPrice = message.readPrice);
        message.freeReadQuota !== undefined && (obj.freeReadQuota = (message.freeReadQuota || helpers_1.Long.UZERO).toString());
        message.storePrice !== undefined && (obj.storePrice = message.storePrice);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSpStoragePrice();
        message.spId = object.spId ?? 0;
        message.updateTimeSec = object.updateTimeSec !== undefined && object.updateTimeSec !== null ? helpers_1.Long.fromValue(object.updateTimeSec) : helpers_1.Long.ZERO;
        message.readPrice = object.readPrice ?? "";
        message.freeReadQuota = object.freeReadQuota !== undefined && object.freeReadQuota !== null ? helpers_1.Long.fromValue(object.freeReadQuota) : helpers_1.Long.UZERO;
        message.storePrice = object.storePrice ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            spId: object?.sp_id,
            updateTimeSec: object?.update_time_sec,
            readPrice: object?.read_price,
            freeReadQuota: object?.free_read_quota,
            storePrice: object?.store_price
        };
    },
    toSDK(message) {
        const obj = {};
        obj.sp_id = message.spId;
        obj.update_time_sec = message.updateTimeSec;
        obj.read_price = message.readPrice;
        obj.free_read_quota = message.freeReadQuota;
        obj.store_price = message.storePrice;
        return obj;
    }
};
function createBaseGlobalSpStorePrice() {
    return {
        updateTimeSec: helpers_1.Long.ZERO,
        readPrice: "",
        primaryStorePrice: "",
        secondaryStorePrice: ""
    };
}
exports.GlobalSpStorePrice = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.updateTimeSec.isZero()) {
            writer.uint32(8).int64(message.updateTimeSec);
        }
        if (message.readPrice !== "") {
            writer.uint32(18).string(message.readPrice);
        }
        if (message.primaryStorePrice !== "") {
            writer.uint32(26).string(message.primaryStorePrice);
        }
        if (message.secondaryStorePrice !== "") {
            writer.uint32(34).string(message.secondaryStorePrice);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGlobalSpStorePrice();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.updateTimeSec = reader.int64();
                    break;
                case 2:
                    message.readPrice = reader.string();
                    break;
                case 3:
                    message.primaryStorePrice = reader.string();
                    break;
                case 4:
                    message.secondaryStorePrice = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            updateTimeSec: (0, helpers_1.isSet)(object.updateTimeSec) ? helpers_1.Long.fromValue(object.updateTimeSec) : helpers_1.Long.ZERO,
            readPrice: (0, helpers_1.isSet)(object.readPrice) ? String(object.readPrice) : "",
            primaryStorePrice: (0, helpers_1.isSet)(object.primaryStorePrice) ? String(object.primaryStorePrice) : "",
            secondaryStorePrice: (0, helpers_1.isSet)(object.secondaryStorePrice) ? String(object.secondaryStorePrice) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.updateTimeSec !== undefined && (obj.updateTimeSec = (message.updateTimeSec || helpers_1.Long.ZERO).toString());
        message.readPrice !== undefined && (obj.readPrice = message.readPrice);
        message.primaryStorePrice !== undefined && (obj.primaryStorePrice = message.primaryStorePrice);
        message.secondaryStorePrice !== undefined && (obj.secondaryStorePrice = message.secondaryStorePrice);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGlobalSpStorePrice();
        message.updateTimeSec = object.updateTimeSec !== undefined && object.updateTimeSec !== null ? helpers_1.Long.fromValue(object.updateTimeSec) : helpers_1.Long.ZERO;
        message.readPrice = object.readPrice ?? "";
        message.primaryStorePrice = object.primaryStorePrice ?? "";
        message.secondaryStorePrice = object.secondaryStorePrice ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            updateTimeSec: object?.update_time_sec,
            readPrice: object?.read_price,
            primaryStorePrice: object?.primary_store_price,
            secondaryStorePrice: object?.secondary_store_price
        };
    },
    toSDK(message) {
        const obj = {};
        obj.update_time_sec = message.updateTimeSec;
        obj.read_price = message.readPrice;
        obj.primary_store_price = message.primaryStorePrice;
        obj.secondary_store_price = message.secondaryStorePrice;
        return obj;
    }
};
function createBaseSpMaintenanceStats() {
    return {
        records: []
    };
}
exports.SpMaintenanceStats = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.records) {
            exports.MaintenanceRecord.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSpMaintenanceStats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.records.push(exports.MaintenanceRecord.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            records: Array.isArray(object?.records) ? object.records.map((e) => exports.MaintenanceRecord.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.records) {
            obj.records = message.records.map(e => e ? exports.MaintenanceRecord.toJSON(e) : undefined);
        }
        else {
            obj.records = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSpMaintenanceStats();
        message.records = object.records?.map(e => exports.MaintenanceRecord.fromPartial(e)) || [];
        return message;
    },
    fromSDK(object) {
        return {
            records: Array.isArray(object?.records) ? object.records.map((e) => exports.MaintenanceRecord.fromSDK(e)) : []
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.records) {
            obj.records = message.records.map(e => e ? exports.MaintenanceRecord.toSDK(e) : undefined);
        }
        else {
            obj.records = [];
        }
        return obj;
    }
};
function createBaseMaintenanceRecord() {
    return {
        height: helpers_1.Long.ZERO,
        requestDuration: helpers_1.Long.ZERO,
        actualDuration: helpers_1.Long.ZERO,
        requestAt: helpers_1.Long.ZERO
    };
}
exports.MaintenanceRecord = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.height.isZero()) {
            writer.uint32(8).int64(message.height);
        }
        if (!message.requestDuration.isZero()) {
            writer.uint32(16).int64(message.requestDuration);
        }
        if (!message.actualDuration.isZero()) {
            writer.uint32(24).int64(message.actualDuration);
        }
        if (!message.requestAt.isZero()) {
            writer.uint32(32).int64(message.requestAt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMaintenanceRecord();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.height = reader.int64();
                    break;
                case 2:
                    message.requestDuration = reader.int64();
                    break;
                case 3:
                    message.actualDuration = reader.int64();
                    break;
                case 4:
                    message.requestAt = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO,
            requestDuration: (0, helpers_1.isSet)(object.requestDuration) ? helpers_1.Long.fromValue(object.requestDuration) : helpers_1.Long.ZERO,
            actualDuration: (0, helpers_1.isSet)(object.actualDuration) ? helpers_1.Long.fromValue(object.actualDuration) : helpers_1.Long.ZERO,
            requestAt: (0, helpers_1.isSet)(object.requestAt) ? helpers_1.Long.fromValue(object.requestAt) : helpers_1.Long.ZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.ZERO).toString());
        message.requestDuration !== undefined && (obj.requestDuration = (message.requestDuration || helpers_1.Long.ZERO).toString());
        message.actualDuration !== undefined && (obj.actualDuration = (message.actualDuration || helpers_1.Long.ZERO).toString());
        message.requestAt !== undefined && (obj.requestAt = (message.requestAt || helpers_1.Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMaintenanceRecord();
        message.height = object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.ZERO;
        message.requestDuration = object.requestDuration !== undefined && object.requestDuration !== null ? helpers_1.Long.fromValue(object.requestDuration) : helpers_1.Long.ZERO;
        message.actualDuration = object.actualDuration !== undefined && object.actualDuration !== null ? helpers_1.Long.fromValue(object.actualDuration) : helpers_1.Long.ZERO;
        message.requestAt = object.requestAt !== undefined && object.requestAt !== null ? helpers_1.Long.fromValue(object.requestAt) : helpers_1.Long.ZERO;
        return message;
    },
    fromSDK(object) {
        return {
            height: object?.height,
            requestDuration: object?.request_duration,
            actualDuration: object?.actual_duration,
            requestAt: object?.request_at
        };
    },
    toSDK(message) {
        const obj = {};
        obj.height = message.height;
        obj.request_duration = message.requestDuration;
        obj.actual_duration = message.actualDuration;
        obj.request_at = message.requestAt;
        return obj;
    }
};
//# sourceMappingURL=types.js.map