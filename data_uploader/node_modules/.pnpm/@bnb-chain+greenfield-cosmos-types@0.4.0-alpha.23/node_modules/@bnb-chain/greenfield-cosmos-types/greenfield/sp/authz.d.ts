import { Coin, CoinSDKType } from "../../cosmos/base/v1beta1/coin";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.sp";
/** DepositAuthorization defines authorization for sp deposit. */
export interface DepositAuthorization {
    /**
     * max_deposit specifies the maximum amount of tokens can be deposit to a storage provider. If it is
     * empty, there is no spend limit and any amount of coins can be deposit.
     */
    maxDeposit: Coin;
    /** sp_address is the operator address of storage provider. */
    spAddress: string;
}
/** DepositAuthorization defines authorization for sp deposit. */
export interface DepositAuthorizationSDKType {
    max_deposit: CoinSDKType;
    sp_address: string;
}
export declare const DepositAuthorization: {
    encode(message: DepositAuthorization, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DepositAuthorization;
    fromJSON(object: any): DepositAuthorization;
    toJSON(message: DepositAuthorization): unknown;
    fromPartial<I extends {
        maxDeposit?: {
            denom?: string;
            amount?: string;
        };
        spAddress?: string;
    } & {
        maxDeposit?: {
            denom?: string;
            amount?: string;
        } & {
            denom?: string;
            amount?: string;
        } & Record<Exclude<keyof I["maxDeposit"], keyof Coin>, never>;
        spAddress?: string;
    } & Record<Exclude<keyof I, keyof DepositAuthorization>, never>>(object: I): DepositAuthorization;
    fromSDK(object: DepositAuthorizationSDKType): DepositAuthorization;
    toSDK(message: DepositAuthorization): DepositAuthorizationSDKType;
};
