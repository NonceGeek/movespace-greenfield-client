"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryDelayedWithdrawalResponse = exports.QueryDelayedWithdrawalRequest = exports.QueryAutoSettleRecordsResponse = exports.QueryAutoSettleRecordsRequest = exports.QueryPaymentAccountsByOwnerResponse = exports.QueryPaymentAccountsByOwnerRequest = exports.QueryDynamicBalanceResponse = exports.QueryDynamicBalanceRequest = exports.QueryPaymentAccountsResponse = exports.QueryPaymentAccountsRequest = exports.QueryPaymentAccountResponse = exports.QueryPaymentAccountRequest = exports.QueryPaymentAccountCountsResponse = exports.QueryPaymentAccountCountsRequest = exports.QueryPaymentAccountCountResponse = exports.QueryPaymentAccountCountRequest = exports.QueryStreamRecordsResponse = exports.QueryStreamRecordsRequest = exports.QueryGetStreamRecordResponse = exports.QueryGetStreamRecordRequest = exports.QueryOutFlowsResponse = exports.QueryOutFlowsRequest = exports.QueryParamsByTimestampResponse = exports.QueryParamsByTimestampRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
//@ts-nocheck
/* eslint-disable */
const pagination_1 = require("../../cosmos/base/query/v1beta1/pagination");
const params_1 = require("./params");
const out_flow_1 = require("./out_flow");
const stream_record_1 = require("./stream_record");
const payment_account_count_1 = require("./payment_account_count");
const payment_account_1 = require("./payment_account");
const auto_settle_record_1 = require("./auto_settle_record");
const delayed_withdrawal_record_1 = require("./delayed_withdrawal_record");
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.payment";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: params_1.Params.fromPartial({})
    };
}
exports.QueryParamsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: (0, helpers_1.isSet)(object.params) ? params_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            params: object.params ? params_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toSDK(message.params) : undefined);
        return obj;
    }
};
function createBaseQueryParamsByTimestampRequest() {
    return {
        timestamp: helpers_1.Long.ZERO
    };
}
exports.QueryParamsByTimestampRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.timestamp.isZero()) {
            writer.uint32(8).int64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsByTimestampRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.timestamp = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            timestamp: (0, helpers_1.isSet)(object.timestamp) ? helpers_1.Long.fromValue(object.timestamp) : helpers_1.Long.ZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.timestamp !== undefined && (obj.timestamp = (message.timestamp || helpers_1.Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsByTimestampRequest();
        message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? helpers_1.Long.fromValue(object.timestamp) : helpers_1.Long.ZERO;
        return message;
    },
    fromSDK(object) {
        return {
            timestamp: object?.timestamp
        };
    },
    toSDK(message) {
        const obj = {};
        obj.timestamp = message.timestamp;
        return obj;
    }
};
function createBaseQueryParamsByTimestampResponse() {
    return {
        params: params_1.Params.fromPartial({})
    };
}
exports.QueryParamsByTimestampResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsByTimestampResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: (0, helpers_1.isSet)(object.params) ? params_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsByTimestampResponse();
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            params: object.params ? params_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toSDK(message.params) : undefined);
        return obj;
    }
};
function createBaseQueryOutFlowsRequest() {
    return {
        account: ""
    };
}
exports.QueryOutFlowsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOutFlowsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: (0, helpers_1.isSet)(object.account) ? String(object.account) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.account !== undefined && (obj.account = message.account);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryOutFlowsRequest();
        message.account = object.account ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            account: object?.account
        };
    },
    toSDK(message) {
        const obj = {};
        obj.account = message.account;
        return obj;
    }
};
function createBaseQueryOutFlowsResponse() {
    return {
        outFlows: []
    };
}
exports.QueryOutFlowsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.outFlows) {
            out_flow_1.OutFlow.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOutFlowsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.outFlows.push(out_flow_1.OutFlow.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            outFlows: Array.isArray(object?.outFlows) ? object.outFlows.map((e) => out_flow_1.OutFlow.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.outFlows) {
            obj.outFlows = message.outFlows.map(e => e ? out_flow_1.OutFlow.toJSON(e) : undefined);
        }
        else {
            obj.outFlows = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryOutFlowsResponse();
        message.outFlows = object.outFlows?.map(e => out_flow_1.OutFlow.fromPartial(e)) || [];
        return message;
    },
    fromSDK(object) {
        return {
            outFlows: Array.isArray(object?.out_flows) ? object.out_flows.map((e) => out_flow_1.OutFlow.fromSDK(e)) : []
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.outFlows) {
            obj.out_flows = message.outFlows.map(e => e ? out_flow_1.OutFlow.toSDK(e) : undefined);
        }
        else {
            obj.out_flows = [];
        }
        return obj;
    }
};
function createBaseQueryGetStreamRecordRequest() {
    return {
        account: ""
    };
}
exports.QueryGetStreamRecordRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetStreamRecordRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: (0, helpers_1.isSet)(object.account) ? String(object.account) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.account !== undefined && (obj.account = message.account);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGetStreamRecordRequest();
        message.account = object.account ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            account: object?.account
        };
    },
    toSDK(message) {
        const obj = {};
        obj.account = message.account;
        return obj;
    }
};
function createBaseQueryGetStreamRecordResponse() {
    return {
        streamRecord: stream_record_1.StreamRecord.fromPartial({})
    };
}
exports.QueryGetStreamRecordResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.streamRecord !== undefined) {
            stream_record_1.StreamRecord.encode(message.streamRecord, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetStreamRecordResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.streamRecord = stream_record_1.StreamRecord.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            streamRecord: (0, helpers_1.isSet)(object.streamRecord) ? stream_record_1.StreamRecord.fromJSON(object.streamRecord) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.streamRecord !== undefined && (obj.streamRecord = message.streamRecord ? stream_record_1.StreamRecord.toJSON(message.streamRecord) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGetStreamRecordResponse();
        message.streamRecord = object.streamRecord !== undefined && object.streamRecord !== null ? stream_record_1.StreamRecord.fromPartial(object.streamRecord) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            streamRecord: object.stream_record ? stream_record_1.StreamRecord.fromSDK(object.stream_record) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.streamRecord !== undefined && (obj.stream_record = message.streamRecord ? stream_record_1.StreamRecord.toSDK(message.streamRecord) : undefined);
        return obj;
    }
};
function createBaseQueryStreamRecordsRequest() {
    return {
        pagination: pagination_1.PageRequest.fromPartial({})
    };
}
exports.QueryStreamRecordsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStreamRecordsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryStreamRecordsRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryStreamRecordsResponse() {
    return {
        streamRecords: [],
        pagination: pagination_1.PageResponse.fromPartial({})
    };
}
exports.QueryStreamRecordsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.streamRecords) {
            stream_record_1.StreamRecord.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStreamRecordsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.streamRecords.push(stream_record_1.StreamRecord.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            streamRecords: Array.isArray(object?.streamRecords) ? object.streamRecords.map((e) => stream_record_1.StreamRecord.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.streamRecords) {
            obj.streamRecords = message.streamRecords.map(e => e ? stream_record_1.StreamRecord.toJSON(e) : undefined);
        }
        else {
            obj.streamRecords = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryStreamRecordsResponse();
        message.streamRecords = object.streamRecords?.map(e => stream_record_1.StreamRecord.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            streamRecords: Array.isArray(object?.stream_records) ? object.stream_records.map((e) => stream_record_1.StreamRecord.fromSDK(e)) : [],
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.streamRecords) {
            obj.stream_records = message.streamRecords.map(e => e ? stream_record_1.StreamRecord.toSDK(e) : undefined);
        }
        else {
            obj.stream_records = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryPaymentAccountCountRequest() {
    return {
        owner: ""
    };
}
exports.QueryPaymentAccountCountRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPaymentAccountCountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPaymentAccountCountRequest();
        message.owner = object.owner ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            owner: object?.owner
        };
    },
    toSDK(message) {
        const obj = {};
        obj.owner = message.owner;
        return obj;
    }
};
function createBaseQueryPaymentAccountCountResponse() {
    return {
        paymentAccountCount: payment_account_count_1.PaymentAccountCount.fromPartial({})
    };
}
exports.QueryPaymentAccountCountResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.paymentAccountCount !== undefined) {
            payment_account_count_1.PaymentAccountCount.encode(message.paymentAccountCount, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPaymentAccountCountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.paymentAccountCount = payment_account_count_1.PaymentAccountCount.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            paymentAccountCount: (0, helpers_1.isSet)(object.paymentAccountCount) ? payment_account_count_1.PaymentAccountCount.fromJSON(object.paymentAccountCount) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.paymentAccountCount !== undefined && (obj.paymentAccountCount = message.paymentAccountCount ? payment_account_count_1.PaymentAccountCount.toJSON(message.paymentAccountCount) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPaymentAccountCountResponse();
        message.paymentAccountCount = object.paymentAccountCount !== undefined && object.paymentAccountCount !== null ? payment_account_count_1.PaymentAccountCount.fromPartial(object.paymentAccountCount) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            paymentAccountCount: object.payment_account_count ? payment_account_count_1.PaymentAccountCount.fromSDK(object.payment_account_count) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.paymentAccountCount !== undefined && (obj.payment_account_count = message.paymentAccountCount ? payment_account_count_1.PaymentAccountCount.toSDK(message.paymentAccountCount) : undefined);
        return obj;
    }
};
function createBaseQueryPaymentAccountCountsRequest() {
    return {
        pagination: pagination_1.PageRequest.fromPartial({})
    };
}
exports.QueryPaymentAccountCountsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPaymentAccountCountsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPaymentAccountCountsRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryPaymentAccountCountsResponse() {
    return {
        paymentAccountCounts: [],
        pagination: pagination_1.PageResponse.fromPartial({})
    };
}
exports.QueryPaymentAccountCountsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.paymentAccountCounts) {
            payment_account_count_1.PaymentAccountCount.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPaymentAccountCountsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.paymentAccountCounts.push(payment_account_count_1.PaymentAccountCount.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            paymentAccountCounts: Array.isArray(object?.paymentAccountCounts) ? object.paymentAccountCounts.map((e) => payment_account_count_1.PaymentAccountCount.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.paymentAccountCounts) {
            obj.paymentAccountCounts = message.paymentAccountCounts.map(e => e ? payment_account_count_1.PaymentAccountCount.toJSON(e) : undefined);
        }
        else {
            obj.paymentAccountCounts = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPaymentAccountCountsResponse();
        message.paymentAccountCounts = object.paymentAccountCounts?.map(e => payment_account_count_1.PaymentAccountCount.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            paymentAccountCounts: Array.isArray(object?.payment_account_counts) ? object.payment_account_counts.map((e) => payment_account_count_1.PaymentAccountCount.fromSDK(e)) : [],
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.paymentAccountCounts) {
            obj.payment_account_counts = message.paymentAccountCounts.map(e => e ? payment_account_count_1.PaymentAccountCount.toSDK(e) : undefined);
        }
        else {
            obj.payment_account_counts = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryPaymentAccountRequest() {
    return {
        addr: ""
    };
}
exports.QueryPaymentAccountRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.addr !== "") {
            writer.uint32(10).string(message.addr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPaymentAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.addr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            addr: (0, helpers_1.isSet)(object.addr) ? String(object.addr) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.addr !== undefined && (obj.addr = message.addr);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPaymentAccountRequest();
        message.addr = object.addr ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            addr: object?.addr
        };
    },
    toSDK(message) {
        const obj = {};
        obj.addr = message.addr;
        return obj;
    }
};
function createBaseQueryPaymentAccountResponse() {
    return {
        paymentAccount: payment_account_1.PaymentAccount.fromPartial({})
    };
}
exports.QueryPaymentAccountResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.paymentAccount !== undefined) {
            payment_account_1.PaymentAccount.encode(message.paymentAccount, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPaymentAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.paymentAccount = payment_account_1.PaymentAccount.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            paymentAccount: (0, helpers_1.isSet)(object.paymentAccount) ? payment_account_1.PaymentAccount.fromJSON(object.paymentAccount) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.paymentAccount !== undefined && (obj.paymentAccount = message.paymentAccount ? payment_account_1.PaymentAccount.toJSON(message.paymentAccount) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPaymentAccountResponse();
        message.paymentAccount = object.paymentAccount !== undefined && object.paymentAccount !== null ? payment_account_1.PaymentAccount.fromPartial(object.paymentAccount) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            paymentAccount: object.payment_account ? payment_account_1.PaymentAccount.fromSDK(object.payment_account) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.paymentAccount !== undefined && (obj.payment_account = message.paymentAccount ? payment_account_1.PaymentAccount.toSDK(message.paymentAccount) : undefined);
        return obj;
    }
};
function createBaseQueryPaymentAccountsRequest() {
    return {
        pagination: pagination_1.PageRequest.fromPartial({})
    };
}
exports.QueryPaymentAccountsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPaymentAccountsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPaymentAccountsRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryPaymentAccountsResponse() {
    return {
        paymentAccounts: [],
        pagination: pagination_1.PageResponse.fromPartial({})
    };
}
exports.QueryPaymentAccountsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.paymentAccounts) {
            payment_account_1.PaymentAccount.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPaymentAccountsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.paymentAccounts.push(payment_account_1.PaymentAccount.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            paymentAccounts: Array.isArray(object?.paymentAccounts) ? object.paymentAccounts.map((e) => payment_account_1.PaymentAccount.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.paymentAccounts) {
            obj.paymentAccounts = message.paymentAccounts.map(e => e ? payment_account_1.PaymentAccount.toJSON(e) : undefined);
        }
        else {
            obj.paymentAccounts = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPaymentAccountsResponse();
        message.paymentAccounts = object.paymentAccounts?.map(e => payment_account_1.PaymentAccount.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            paymentAccounts: Array.isArray(object?.payment_accounts) ? object.payment_accounts.map((e) => payment_account_1.PaymentAccount.fromSDK(e)) : [],
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.paymentAccounts) {
            obj.payment_accounts = message.paymentAccounts.map(e => e ? payment_account_1.PaymentAccount.toSDK(e) : undefined);
        }
        else {
            obj.payment_accounts = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryDynamicBalanceRequest() {
    return {
        account: ""
    };
}
exports.QueryDynamicBalanceRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDynamicBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: (0, helpers_1.isSet)(object.account) ? String(object.account) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.account !== undefined && (obj.account = message.account);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryDynamicBalanceRequest();
        message.account = object.account ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            account: object?.account
        };
    },
    toSDK(message) {
        const obj = {};
        obj.account = message.account;
        return obj;
    }
};
function createBaseQueryDynamicBalanceResponse() {
    return {
        dynamicBalance: "",
        streamRecord: stream_record_1.StreamRecord.fromPartial({}),
        currentTimestamp: helpers_1.Long.ZERO,
        bankBalance: "",
        availableBalance: "",
        lockedFee: "",
        changeRate: ""
    };
}
exports.QueryDynamicBalanceResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.dynamicBalance !== "") {
            writer.uint32(10).string(message.dynamicBalance);
        }
        if (message.streamRecord !== undefined) {
            stream_record_1.StreamRecord.encode(message.streamRecord, writer.uint32(18).fork()).ldelim();
        }
        if (!message.currentTimestamp.isZero()) {
            writer.uint32(24).int64(message.currentTimestamp);
        }
        if (message.bankBalance !== "") {
            writer.uint32(34).string(message.bankBalance);
        }
        if (message.availableBalance !== "") {
            writer.uint32(42).string(message.availableBalance);
        }
        if (message.lockedFee !== "") {
            writer.uint32(50).string(message.lockedFee);
        }
        if (message.changeRate !== "") {
            writer.uint32(58).string(message.changeRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDynamicBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.dynamicBalance = reader.string();
                    break;
                case 2:
                    message.streamRecord = stream_record_1.StreamRecord.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.currentTimestamp = reader.int64();
                    break;
                case 4:
                    message.bankBalance = reader.string();
                    break;
                case 5:
                    message.availableBalance = reader.string();
                    break;
                case 6:
                    message.lockedFee = reader.string();
                    break;
                case 7:
                    message.changeRate = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            dynamicBalance: (0, helpers_1.isSet)(object.dynamicBalance) ? String(object.dynamicBalance) : "",
            streamRecord: (0, helpers_1.isSet)(object.streamRecord) ? stream_record_1.StreamRecord.fromJSON(object.streamRecord) : undefined,
            currentTimestamp: (0, helpers_1.isSet)(object.currentTimestamp) ? helpers_1.Long.fromValue(object.currentTimestamp) : helpers_1.Long.ZERO,
            bankBalance: (0, helpers_1.isSet)(object.bankBalance) ? String(object.bankBalance) : "",
            availableBalance: (0, helpers_1.isSet)(object.availableBalance) ? String(object.availableBalance) : "",
            lockedFee: (0, helpers_1.isSet)(object.lockedFee) ? String(object.lockedFee) : "",
            changeRate: (0, helpers_1.isSet)(object.changeRate) ? String(object.changeRate) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.dynamicBalance !== undefined && (obj.dynamicBalance = message.dynamicBalance);
        message.streamRecord !== undefined && (obj.streamRecord = message.streamRecord ? stream_record_1.StreamRecord.toJSON(message.streamRecord) : undefined);
        message.currentTimestamp !== undefined && (obj.currentTimestamp = (message.currentTimestamp || helpers_1.Long.ZERO).toString());
        message.bankBalance !== undefined && (obj.bankBalance = message.bankBalance);
        message.availableBalance !== undefined && (obj.availableBalance = message.availableBalance);
        message.lockedFee !== undefined && (obj.lockedFee = message.lockedFee);
        message.changeRate !== undefined && (obj.changeRate = message.changeRate);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryDynamicBalanceResponse();
        message.dynamicBalance = object.dynamicBalance ?? "";
        message.streamRecord = object.streamRecord !== undefined && object.streamRecord !== null ? stream_record_1.StreamRecord.fromPartial(object.streamRecord) : undefined;
        message.currentTimestamp = object.currentTimestamp !== undefined && object.currentTimestamp !== null ? helpers_1.Long.fromValue(object.currentTimestamp) : helpers_1.Long.ZERO;
        message.bankBalance = object.bankBalance ?? "";
        message.availableBalance = object.availableBalance ?? "";
        message.lockedFee = object.lockedFee ?? "";
        message.changeRate = object.changeRate ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            dynamicBalance: object?.dynamic_balance,
            streamRecord: object.stream_record ? stream_record_1.StreamRecord.fromSDK(object.stream_record) : undefined,
            currentTimestamp: object?.current_timestamp,
            bankBalance: object?.bank_balance,
            availableBalance: object?.available_balance,
            lockedFee: object?.locked_fee,
            changeRate: object?.change_rate
        };
    },
    toSDK(message) {
        const obj = {};
        obj.dynamic_balance = message.dynamicBalance;
        message.streamRecord !== undefined && (obj.stream_record = message.streamRecord ? stream_record_1.StreamRecord.toSDK(message.streamRecord) : undefined);
        obj.current_timestamp = message.currentTimestamp;
        obj.bank_balance = message.bankBalance;
        obj.available_balance = message.availableBalance;
        obj.locked_fee = message.lockedFee;
        obj.change_rate = message.changeRate;
        return obj;
    }
};
function createBaseQueryPaymentAccountsByOwnerRequest() {
    return {
        owner: ""
    };
}
exports.QueryPaymentAccountsByOwnerRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPaymentAccountsByOwnerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPaymentAccountsByOwnerRequest();
        message.owner = object.owner ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            owner: object?.owner
        };
    },
    toSDK(message) {
        const obj = {};
        obj.owner = message.owner;
        return obj;
    }
};
function createBaseQueryPaymentAccountsByOwnerResponse() {
    return {
        paymentAccounts: []
    };
}
exports.QueryPaymentAccountsByOwnerResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.paymentAccounts) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPaymentAccountsByOwnerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.paymentAccounts.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            paymentAccounts: Array.isArray(object?.paymentAccounts) ? object.paymentAccounts.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.paymentAccounts) {
            obj.paymentAccounts = message.paymentAccounts.map(e => e);
        }
        else {
            obj.paymentAccounts = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPaymentAccountsByOwnerResponse();
        message.paymentAccounts = object.paymentAccounts?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            paymentAccounts: Array.isArray(object?.paymentAccounts) ? object.paymentAccounts.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.paymentAccounts) {
            obj.paymentAccounts = message.paymentAccounts.map(e => e);
        }
        else {
            obj.paymentAccounts = [];
        }
        return obj;
    }
};
function createBaseQueryAutoSettleRecordsRequest() {
    return {
        pagination: pagination_1.PageRequest.fromPartial({})
    };
}
exports.QueryAutoSettleRecordsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAutoSettleRecordsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryAutoSettleRecordsRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryAutoSettleRecordsResponse() {
    return {
        autoSettleRecords: [],
        pagination: pagination_1.PageResponse.fromPartial({})
    };
}
exports.QueryAutoSettleRecordsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.autoSettleRecords) {
            auto_settle_record_1.AutoSettleRecord.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAutoSettleRecordsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.autoSettleRecords.push(auto_settle_record_1.AutoSettleRecord.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            autoSettleRecords: Array.isArray(object?.autoSettleRecords) ? object.autoSettleRecords.map((e) => auto_settle_record_1.AutoSettleRecord.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.autoSettleRecords) {
            obj.autoSettleRecords = message.autoSettleRecords.map(e => e ? auto_settle_record_1.AutoSettleRecord.toJSON(e) : undefined);
        }
        else {
            obj.autoSettleRecords = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryAutoSettleRecordsResponse();
        message.autoSettleRecords = object.autoSettleRecords?.map(e => auto_settle_record_1.AutoSettleRecord.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            autoSettleRecords: Array.isArray(object?.auto_settle_records) ? object.auto_settle_records.map((e) => auto_settle_record_1.AutoSettleRecord.fromSDK(e)) : [],
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.autoSettleRecords) {
            obj.auto_settle_records = message.autoSettleRecords.map(e => e ? auto_settle_record_1.AutoSettleRecord.toSDK(e) : undefined);
        }
        else {
            obj.auto_settle_records = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryDelayedWithdrawalRequest() {
    return {
        account: ""
    };
}
exports.QueryDelayedWithdrawalRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelayedWithdrawalRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: (0, helpers_1.isSet)(object.account) ? String(object.account) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.account !== undefined && (obj.account = message.account);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryDelayedWithdrawalRequest();
        message.account = object.account ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            account: object?.account
        };
    },
    toSDK(message) {
        const obj = {};
        obj.account = message.account;
        return obj;
    }
};
function createBaseQueryDelayedWithdrawalResponse() {
    return {
        delayedWithdrawal: delayed_withdrawal_record_1.DelayedWithdrawalRecord.fromPartial({})
    };
}
exports.QueryDelayedWithdrawalResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.delayedWithdrawal !== undefined) {
            delayed_withdrawal_record_1.DelayedWithdrawalRecord.encode(message.delayedWithdrawal, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDelayedWithdrawalResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.delayedWithdrawal = delayed_withdrawal_record_1.DelayedWithdrawalRecord.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            delayedWithdrawal: (0, helpers_1.isSet)(object.delayedWithdrawal) ? delayed_withdrawal_record_1.DelayedWithdrawalRecord.fromJSON(object.delayedWithdrawal) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.delayedWithdrawal !== undefined && (obj.delayedWithdrawal = message.delayedWithdrawal ? delayed_withdrawal_record_1.DelayedWithdrawalRecord.toJSON(message.delayedWithdrawal) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryDelayedWithdrawalResponse();
        message.delayedWithdrawal = object.delayedWithdrawal !== undefined && object.delayedWithdrawal !== null ? delayed_withdrawal_record_1.DelayedWithdrawalRecord.fromPartial(object.delayedWithdrawal) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            delayedWithdrawal: object.delayed_withdrawal ? delayed_withdrawal_record_1.DelayedWithdrawalRecord.fromSDK(object.delayed_withdrawal) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.delayedWithdrawal !== undefined && (obj.delayed_withdrawal = message.delayedWithdrawal ? delayed_withdrawal_record_1.DelayedWithdrawalRecord.toSDK(message.delayedWithdrawal) : undefined);
        return obj;
    }
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.ParamsByTimestamp = this.ParamsByTimestamp.bind(this);
        this.OutFlows = this.OutFlows.bind(this);
        this.StreamRecord = this.StreamRecord.bind(this);
        this.StreamRecords = this.StreamRecords.bind(this);
        this.PaymentAccountCount = this.PaymentAccountCount.bind(this);
        this.PaymentAccountCounts = this.PaymentAccountCounts.bind(this);
        this.PaymentAccount = this.PaymentAccount.bind(this);
        this.PaymentAccounts = this.PaymentAccounts.bind(this);
        this.DynamicBalance = this.DynamicBalance.bind(this);
        this.PaymentAccountsByOwner = this.PaymentAccountsByOwner.bind(this);
        this.AutoSettleRecords = this.AutoSettleRecords.bind(this);
        this.DelayedWithdrawal = this.DelayedWithdrawal.bind(this);
    }
    Params(request = {}) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "Params", data);
        return promise.then(data => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
    }
    ParamsByTimestamp(request) {
        const data = exports.QueryParamsByTimestampRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "ParamsByTimestamp", data);
        return promise.then(data => exports.QueryParamsByTimestampResponse.decode(new _m0.Reader(data)));
    }
    OutFlows(request) {
        const data = exports.QueryOutFlowsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "OutFlows", data);
        return promise.then(data => exports.QueryOutFlowsResponse.decode(new _m0.Reader(data)));
    }
    StreamRecord(request) {
        const data = exports.QueryGetStreamRecordRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "StreamRecord", data);
        return promise.then(data => exports.QueryGetStreamRecordResponse.decode(new _m0.Reader(data)));
    }
    StreamRecords(request = {
        pagination: undefined
    }) {
        const data = exports.QueryStreamRecordsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "StreamRecords", data);
        return promise.then(data => exports.QueryStreamRecordsResponse.decode(new _m0.Reader(data)));
    }
    PaymentAccountCount(request) {
        const data = exports.QueryPaymentAccountCountRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "PaymentAccountCount", data);
        return promise.then(data => exports.QueryPaymentAccountCountResponse.decode(new _m0.Reader(data)));
    }
    PaymentAccountCounts(request = {
        pagination: undefined
    }) {
        const data = exports.QueryPaymentAccountCountsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "PaymentAccountCounts", data);
        return promise.then(data => exports.QueryPaymentAccountCountsResponse.decode(new _m0.Reader(data)));
    }
    PaymentAccount(request) {
        const data = exports.QueryPaymentAccountRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "PaymentAccount", data);
        return promise.then(data => exports.QueryPaymentAccountResponse.decode(new _m0.Reader(data)));
    }
    PaymentAccounts(request = {
        pagination: undefined
    }) {
        const data = exports.QueryPaymentAccountsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "PaymentAccounts", data);
        return promise.then(data => exports.QueryPaymentAccountsResponse.decode(new _m0.Reader(data)));
    }
    DynamicBalance(request) {
        const data = exports.QueryDynamicBalanceRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "DynamicBalance", data);
        return promise.then(data => exports.QueryDynamicBalanceResponse.decode(new _m0.Reader(data)));
    }
    PaymentAccountsByOwner(request) {
        const data = exports.QueryPaymentAccountsByOwnerRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "PaymentAccountsByOwner", data);
        return promise.then(data => exports.QueryPaymentAccountsByOwnerResponse.decode(new _m0.Reader(data)));
    }
    AutoSettleRecords(request = {
        pagination: undefined
    }) {
        const data = exports.QueryAutoSettleRecordsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "AutoSettleRecords", data);
        return promise.then(data => exports.QueryAutoSettleRecordsResponse.decode(new _m0.Reader(data)));
    }
    DelayedWithdrawal(request) {
        const data = exports.QueryDelayedWithdrawalRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "DelayedWithdrawal", data);
        return promise.then(data => exports.QueryDelayedWithdrawalResponse.decode(new _m0.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
//# sourceMappingURL=query.js.map