import { Config, ConfigSDKType } from "./config";
import * as _m0 from "protobufjs/minimal";
import { Rpc } from "../../../helpers";
export declare const protobufPackage = "cosmos.app.v1alpha1";
/** QueryConfigRequest is the Query/Config request type. */
export interface QueryConfigRequest {
}
/** QueryConfigRequest is the Query/Config request type. */
export interface QueryConfigRequestSDKType {
}
/** QueryConfigRequest is the Query/Config response type. */
export interface QueryConfigResponse {
    /** config is the current app config. */
    config: Config;
}
/** QueryConfigRequest is the Query/Config response type. */
export interface QueryConfigResponseSDKType {
    config: ConfigSDKType;
}
export declare const QueryConfigRequest: {
    encode(_: QueryConfigRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryConfigRequest;
    fromJSON(_: any): QueryConfigRequest;
    toJSON(_: QueryConfigRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryConfigRequest;
    fromSDK(_: QueryConfigRequestSDKType): QueryConfigRequest;
    toSDK(_: QueryConfigRequest): QueryConfigRequestSDKType;
};
export declare const QueryConfigResponse: {
    encode(message: QueryConfigResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryConfigResponse;
    fromJSON(object: any): QueryConfigResponse;
    toJSON(message: QueryConfigResponse): unknown;
    fromPartial<I extends {
        config?: {
            modules?: {
                name?: string;
                config?: {
                    typeUrl?: string;
                    value?: Uint8Array;
                };
                golangBindings?: {
                    interfaceType?: string;
                    implementation?: string;
                }[];
            }[];
            golangBindings?: {
                interfaceType?: string;
                implementation?: string;
            }[];
        };
    } & {
        config?: {
            modules?: {
                name?: string;
                config?: {
                    typeUrl?: string;
                    value?: Uint8Array;
                };
                golangBindings?: {
                    interfaceType?: string;
                    implementation?: string;
                }[];
            }[];
            golangBindings?: {
                interfaceType?: string;
                implementation?: string;
            }[];
        } & {
            modules?: {
                name?: string;
                config?: {
                    typeUrl?: string;
                    value?: Uint8Array;
                };
                golangBindings?: {
                    interfaceType?: string;
                    implementation?: string;
                }[];
            }[] & ({
                name?: string;
                config?: {
                    typeUrl?: string;
                    value?: Uint8Array;
                };
                golangBindings?: {
                    interfaceType?: string;
                    implementation?: string;
                }[];
            } & {
                name?: string;
                config?: {
                    typeUrl?: string;
                    value?: Uint8Array;
                } & {
                    typeUrl?: string;
                    value?: Uint8Array;
                } & Record<Exclude<keyof I["config"]["modules"][number]["config"], keyof import("../../../google/protobuf/any").Any>, never>;
                golangBindings?: {
                    interfaceType?: string;
                    implementation?: string;
                }[] & ({
                    interfaceType?: string;
                    implementation?: string;
                } & {
                    interfaceType?: string;
                    implementation?: string;
                } & Record<Exclude<keyof I["config"]["modules"][number]["golangBindings"][number], keyof import("./config").GolangBinding>, never>)[] & Record<Exclude<keyof I["config"]["modules"][number]["golangBindings"], keyof {
                    interfaceType?: string;
                    implementation?: string;
                }[]>, never>;
            } & Record<Exclude<keyof I["config"]["modules"][number], keyof import("./config").ModuleConfig>, never>)[] & Record<Exclude<keyof I["config"]["modules"], keyof {
                name?: string;
                config?: {
                    typeUrl?: string;
                    value?: Uint8Array;
                };
                golangBindings?: {
                    interfaceType?: string;
                    implementation?: string;
                }[];
            }[]>, never>;
            golangBindings?: {
                interfaceType?: string;
                implementation?: string;
            }[] & ({
                interfaceType?: string;
                implementation?: string;
            } & {
                interfaceType?: string;
                implementation?: string;
            } & Record<Exclude<keyof I["config"]["golangBindings"][number], keyof import("./config").GolangBinding>, never>)[] & Record<Exclude<keyof I["config"]["golangBindings"], keyof {
                interfaceType?: string;
                implementation?: string;
            }[]>, never>;
        } & Record<Exclude<keyof I["config"], keyof Config>, never>;
    } & Record<Exclude<keyof I, "config">, never>>(object: I): QueryConfigResponse;
    fromSDK(object: QueryConfigResponseSDKType): QueryConfigResponse;
    toSDK(message: QueryConfigResponse): QueryConfigResponseSDKType;
};
/** Query is the app module query service. */
export interface Query {
    /** Config returns the current app config. */
    Config(request?: QueryConfigRequest): Promise<QueryConfigResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Config(request?: QueryConfigRequest): Promise<QueryConfigResponse>;
}
