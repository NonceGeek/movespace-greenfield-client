import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "cosmos.crosschain.v1";
/** Params holds parameters for the cross chain module. */
export interface Params {
    /** initial balance to mint for crosschain module when the chain starts */
    initModuleBalance: string;
}
/** Params holds parameters for the cross chain module. */
export interface ParamsSDKType {
    init_module_balance: string;
}
/** ChannelPermission defines the fields of the channel permission */
export interface ChannelPermission {
    /** destination chain id */
    destChainId: number;
    /** channel id */
    channelId: number;
    /** permission status, 1 for allow, 0 for forbidden */
    permission: number;
}
/** ChannelPermission defines the fields of the channel permission */
export interface ChannelPermissionSDKType {
    dest_chain_id: number;
    channel_id: number;
    permission: number;
}
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial<I extends {
        initModuleBalance?: string;
    } & {
        initModuleBalance?: string;
    } & Record<Exclude<keyof I, "initModuleBalance">, never>>(object: I): Params;
    fromSDK(object: ParamsSDKType): Params;
    toSDK(message: Params): ParamsSDKType;
};
export declare const ChannelPermission: {
    encode(message: ChannelPermission, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ChannelPermission;
    fromJSON(object: any): ChannelPermission;
    toJSON(message: ChannelPermission): unknown;
    fromPartial<I extends {
        destChainId?: number;
        channelId?: number;
        permission?: number;
    } & {
        destChainId?: number;
        channelId?: number;
        permission?: number;
    } & Record<Exclude<keyof I, keyof ChannelPermission>, never>>(object: I): ChannelPermission;
    fromSDK(object: ChannelPermissionSDKType): ChannelPermission;
    toSDK(message: ChannelPermission): ChannelPermissionSDKType;
};
