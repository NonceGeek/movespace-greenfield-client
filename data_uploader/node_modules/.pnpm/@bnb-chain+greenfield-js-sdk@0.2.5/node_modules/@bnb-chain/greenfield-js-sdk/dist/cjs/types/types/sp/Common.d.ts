export type BucketMeta = {
    BucketInfo: BucketInfo;
    CreateTxHash: string;
    DeleteAt: number;
    DeleteReason: string;
    Operator: string;
    Removed: boolean;
    UpdateAt: number;
    UpdateTime: number;
    UpdateTxHash: string;
};
export type GlobalVirtualGroupFamily = {
    Id: number;
    PrimarySpId: number;
    GlobalVirtualGroupIds: number[];
    VirtualPaymentAddress: string;
};
export interface BucketMetaWithVGF extends BucketMeta {
    Vgf: GlobalVirtualGroupFamily;
}
export declare function formatVGF(vgf: GlobalVirtualGroupFamily): GlobalVirtualGroupFamily;
export interface BucketInfo {
    BucketName: string;
    BucketStatus: number;
    ChargedReadQuota: number;
    CreateAt: number;
    GlobalVirtualGroupFamilyId: number;
    Id: string;
    Owner: string;
    PaymentAddress: string;
    SourceType: number;
    Visibility: number;
}
export interface StreamRecord {
    Account: string;
    CrudTimestamp: string;
    NetflowRate: string;
    StaticBalance: string;
    BufferBalance: string;
    LockBalance: string;
    Status: string;
    SettleTimestamp: string;
    OutFlowCount: string;
    FrozenNetflowRate: string;
}
export interface ObjectMeta {
    ObjectInfo: ObjectInfo;
    LockedBalance: string;
    Removed: boolean;
    UpdateAt: number;
    DeleteAt: number;
    DeleteReason: string;
    Operator: string;
    CreateTxHash: string;
    UpdateTxHash: string;
    SealTxHash: string;
}
export interface ObjectInfo {
    BucketName: string;
    Checksums: string[];
    ContentType: string;
    CreateAt: number;
    Creator: string;
    Id: number;
    LocalVirtualGroupId: number;
    ObjectName: string;
    ObjectStatus: number;
    Owner: string;
    PayloadSize: number;
    RedundancyType: number;
    SourceType: number;
    Visibility: number;
}
export declare function formatBucketInfo(o: BucketInfo): {
    BucketStatus: number;
    ChargedReadQuota: number;
    CreateAt: number;
    GlobalVirtualGroupFamilyId: number;
    SourceType: number;
    Visibility: number;
    BucketName: string;
    Id: string;
    Owner: string;
    PaymentAddress: string;
};
export declare function formatObjectInfo(o: ObjectInfo): {
    CreateAt: number;
    Id: number;
    LocalVirtualGroupId: number;
    ObjectStatus: number;
    PayloadSize: number;
    RedundancyType: number;
    SourceType: number;
    Visibility: number;
    BucketName: string;
    Checksums: string[];
    ContentType: string;
    Creator: string;
    ObjectName: string;
    Owner: string;
};
export declare function convertStrToBool(str: string): boolean;
export interface ReadRecord {
    ObjectName: string;
    ObjectID: string;
    ReadAccountAddress: string;
    ReadTimestampUs: number;
    ReadSize: number;
}
export declare function formatReadRecord(o: ReadRecord): {
    ReadTimestampUs: number;
    ReadSize: number;
    ObjectName: string;
    ObjectID: string;
    ReadAccountAddress: string;
};
export interface GroupInfo {
    Owner: string;
    GroupName: string;
    SourceType: number;
    Id: number;
    Extra: string;
}
export declare function formatGroupInfo(o: GroupInfo): {
    SourceType: number;
    Id: number;
    Owner: string;
    GroupName: string;
    Extra: string;
};
export interface PolicyMeta {
    /**
     * principal_type defines the type of principal
     */
    PrincipalType: number;
    /**
     * principal_value defines the value of principal
     */
    PrincipalValue: string;
    /**
     * resource_type defines the type of resource that grants permission for
     */
    ResourceType: number;
    /**
     * resource_id defines the bucket/object/group id of the resource that grants permission for
     */
    ResourceId: string;
    /**
     * create_timestamp defines the create time of permission
     */
    CreateTimestamp: number;
    /**
     * update_timestamp defines the update time of permission
     */
    UpdateTimestamp: number;
    /**
     * expiration_time defines the expiration time of permission
     */
    ExpirationTime: number;
}
