import { ReqMeta } from '@/types/auth';
import { getGetObjectMetaInfo } from './spApis/getObject';
import { getPutObjectMetaInfo } from './spApis/putObject';
/**
 * ECDSA Signature
 */
export type ECDSA = {
    type: 'ECDSA';
    privateKey: string;
};
/**
 * EDDSA Signature
 */
export type EDDSA = {
    type: 'EDDSA';
    seed: string;
    domain: string;
    address: string;
};
export type AuthType = ECDSA | EDDSA;
export interface ISpClient {
    callApi(url: string, options: RequestInit, duration: number, customError?: {
        message: string;
        code: number;
    }): Promise<Response>;
    signHeaders(reqMeta: Partial<ReqMeta>, authType: AuthType): Promise<Headers>;
    /**
     *
     * ```
     * const { PUT_OBJECT: getPutObjectMetaInfo } = client.spClient.getMetaInfo(endpoint, payload);
     * const {reqMeta, url} = await getPutObjectMetaInfo(endpoint, params);
     *
     * axios.put(...)
     * ```
     *
     */
    getMetaInfo(): {
        PUT_OBJECT: typeof getPutObjectMetaInfo;
        GET_OBJECT: typeof getGetObjectMetaInfo;
    };
}
export declare class SpClient implements ISpClient {
    callApi(url: string, options: RequestInit, timeout?: number, customError?: {
        message: string;
        code: number;
    }): Promise<Response>;
    signHeaders(reqMeta: Partial<ReqMeta>, authType: AuthType): Promise<Headers>;
    getMetaInfo(): {
        PUT_OBJECT: (endpoint: string, params: {
            objectName: string;
            bucketName: string;
            txnHash: string;
            contentType: string;
            body: File;
        }) => Promise<{
            url: string;
            optionsWithOutHeaders: Omit<RequestInit, "headers">;
            reqMeta: Partial<ReqMeta>;
        }>;
        GET_OBJECT: (endpoint: string, params: {
            objectName: string;
            bucketName: string;
        }) => Promise<{
            url: string;
            optionsWithOutHeaders: Omit<RequestInit, "headers">;
            reqMeta: Partial<ReqMeta>;
        }>;
    };
}
